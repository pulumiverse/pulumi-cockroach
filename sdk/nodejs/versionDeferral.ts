// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Configure minor version upgrade deferral for a cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cockroach from "@pulumiverse/cockroach";
 *
 * const config = new pulumi.Config();
 * const clusterId = config.require("clusterId");
 * const offsetDuration = config.get("offsetDuration") || "FIXED_DEFERRAL";
 * const example = new cockroach.VersionDeferral("example", {
 *     clusterId: clusterId,
 *     deferralPolicy: offsetDuration,
 * });
 * ```
 */
export class VersionDeferral extends pulumi.CustomResource {
    /**
     * Get an existing VersionDeferral resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VersionDeferralState, opts?: pulumi.CustomResourceOptions): VersionDeferral {
        return new VersionDeferral(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cockroach:index/versionDeferral:VersionDeferral';

    /**
     * Returns true if the given object is an instance of VersionDeferral.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VersionDeferral {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VersionDeferral.__pulumiType;
    }

    /**
     * Cluster ID.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * The policy for managing automated minor version upgrades. Set to FIXED*DEFERRAL to defer upgrades by 60 days or NOT*DEFERRED to apply upgrades immediately.
     */
    public readonly deferralPolicy!: pulumi.Output<string>;

    /**
     * Create a VersionDeferral resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VersionDeferralArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VersionDeferralArgs | VersionDeferralState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VersionDeferralState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["deferralPolicy"] = state ? state.deferralPolicy : undefined;
        } else {
            const args = argsOrState as VersionDeferralArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.deferralPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deferralPolicy'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["deferralPolicy"] = args ? args.deferralPolicy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VersionDeferral.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VersionDeferral resources.
 */
export interface VersionDeferralState {
    /**
     * Cluster ID.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The policy for managing automated minor version upgrades. Set to FIXED*DEFERRAL to defer upgrades by 60 days or NOT*DEFERRED to apply upgrades immediately.
     */
    deferralPolicy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VersionDeferral resource.
 */
export interface VersionDeferralArgs {
    /**
     * Cluster ID.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The policy for managing automated minor version upgrades. Set to FIXED*DEFERRAL to defer upgrades by 60 days or NOT*DEFERRED to apply upgrades immediately.
     */
    deferralPolicy: pulumi.Input<string>;
}
