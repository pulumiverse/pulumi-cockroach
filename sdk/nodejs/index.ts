// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AllowListArgs, AllowListState } from "./allowList";
export type AllowList = import("./allowList").AllowList;
export const AllowList: typeof import("./allowList").AllowList = null as any;
utilities.lazyLoad(exports, ["AllowList"], () => require("./allowList"));

export { ApiOidcConfigArgs, ApiOidcConfigState } from "./apiOidcConfig";
export type ApiOidcConfig = import("./apiOidcConfig").ApiOidcConfig;
export const ApiOidcConfig: typeof import("./apiOidcConfig").ApiOidcConfig = null as any;
utilities.lazyLoad(exports, ["ApiOidcConfig"], () => require("./apiOidcConfig"));

export { CaCertArgs, CaCertState } from "./caCert";
export type CaCert = import("./caCert").CaCert;
export const CaCert: typeof import("./caCert").CaCert = null as any;
utilities.lazyLoad(exports, ["CaCert"], () => require("./caCert"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { CmekArgs, CmekState } from "./cmek";
export type Cmek = import("./cmek").Cmek;
export const Cmek: typeof import("./cmek").Cmek = null as any;
utilities.lazyLoad(exports, ["Cmek"], () => require("./cmek"));

export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { FinalizeVersionUpgradeArgs, FinalizeVersionUpgradeState } from "./finalizeVersionUpgrade";
export type FinalizeVersionUpgrade = import("./finalizeVersionUpgrade").FinalizeVersionUpgrade;
export const FinalizeVersionUpgrade: typeof import("./finalizeVersionUpgrade").FinalizeVersionUpgrade = null as any;
utilities.lazyLoad(exports, ["FinalizeVersionUpgrade"], () => require("./finalizeVersionUpgrade"));

export { FolderArgs, FolderState } from "./folder";
export type Folder = import("./folder").Folder;
export const Folder: typeof import("./folder").Folder = null as any;
utilities.lazyLoad(exports, ["Folder"], () => require("./folder"));

export { GetClusterCertArgs, GetClusterCertResult, GetClusterCertOutputArgs } from "./getClusterCert";
export const getClusterCert: typeof import("./getClusterCert").getClusterCert = null as any;
export const getClusterCertOutput: typeof import("./getClusterCert").getClusterCertOutput = null as any;
utilities.lazyLoad(exports, ["getClusterCert","getClusterCertOutput"], () => require("./getClusterCert"));

export { GetCockroachClusterArgs, GetCockroachClusterResult, GetCockroachClusterOutputArgs } from "./getCockroachCluster";
export const getCockroachCluster: typeof import("./getCockroachCluster").getCockroachCluster = null as any;
export const getCockroachClusterOutput: typeof import("./getCockroachCluster").getCockroachClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCockroachCluster","getCockroachClusterOutput"], () => require("./getCockroachCluster"));

export { GetConnectionStringArgs, GetConnectionStringResult, GetConnectionStringOutputArgs } from "./getConnectionString";
export const getConnectionString: typeof import("./getConnectionString").getConnectionString = null as any;
export const getConnectionStringOutput: typeof import("./getConnectionString").getConnectionStringOutput = null as any;
utilities.lazyLoad(exports, ["getConnectionString","getConnectionStringOutput"], () => require("./getConnectionString"));

export { GetFolderArgs, GetFolderResult, GetFolderOutputArgs } from "./getFolder";
export const getFolder: typeof import("./getFolder").getFolder = null as any;
export const getFolderOutput: typeof import("./getFolder").getFolderOutput = null as any;
utilities.lazyLoad(exports, ["getFolder","getFolderOutput"], () => require("./getFolder"));

export { GetOrganizationResult } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetPersonUserArgs, GetPersonUserResult, GetPersonUserOutputArgs } from "./getPersonUser";
export const getPersonUser: typeof import("./getPersonUser").getPersonUser = null as any;
export const getPersonUserOutput: typeof import("./getPersonUser").getPersonUserOutput = null as any;
utilities.lazyLoad(exports, ["getPersonUser","getPersonUserOutput"], () => require("./getPersonUser"));

export { LogExportConfigArgs, LogExportConfigState } from "./logExportConfig";
export type LogExportConfig = import("./logExportConfig").LogExportConfig;
export const LogExportConfig: typeof import("./logExportConfig").LogExportConfig = null as any;
utilities.lazyLoad(exports, ["LogExportConfig"], () => require("./logExportConfig"));

export { MaintenanceWindowArgs, MaintenanceWindowState } from "./maintenanceWindow";
export type MaintenanceWindow = import("./maintenanceWindow").MaintenanceWindow;
export const MaintenanceWindow: typeof import("./maintenanceWindow").MaintenanceWindow = null as any;
utilities.lazyLoad(exports, ["MaintenanceWindow"], () => require("./maintenanceWindow"));

export { MetricExportCloudwatchConfigArgs, MetricExportCloudwatchConfigState } from "./metricExportCloudwatchConfig";
export type MetricExportCloudwatchConfig = import("./metricExportCloudwatchConfig").MetricExportCloudwatchConfig;
export const MetricExportCloudwatchConfig: typeof import("./metricExportCloudwatchConfig").MetricExportCloudwatchConfig = null as any;
utilities.lazyLoad(exports, ["MetricExportCloudwatchConfig"], () => require("./metricExportCloudwatchConfig"));

export { MetricExportDatadogConfigArgs, MetricExportDatadogConfigState } from "./metricExportDatadogConfig";
export type MetricExportDatadogConfig = import("./metricExportDatadogConfig").MetricExportDatadogConfig;
export const MetricExportDatadogConfig: typeof import("./metricExportDatadogConfig").MetricExportDatadogConfig = null as any;
utilities.lazyLoad(exports, ["MetricExportDatadogConfig"], () => require("./metricExportDatadogConfig"));

export { PrivateEndpointConnectionArgs, PrivateEndpointConnectionState } from "./privateEndpointConnection";
export type PrivateEndpointConnection = import("./privateEndpointConnection").PrivateEndpointConnection;
export const PrivateEndpointConnection: typeof import("./privateEndpointConnection").PrivateEndpointConnection = null as any;
utilities.lazyLoad(exports, ["PrivateEndpointConnection"], () => require("./privateEndpointConnection"));

export { PrivateEndpointServicesArgs, PrivateEndpointServicesState } from "./privateEndpointServices";
export type PrivateEndpointServices = import("./privateEndpointServices").PrivateEndpointServices;
export const PrivateEndpointServices: typeof import("./privateEndpointServices").PrivateEndpointServices = null as any;
utilities.lazyLoad(exports, ["PrivateEndpointServices"], () => require("./privateEndpointServices"));

export { PrivateEndpointTrustedOwnerArgs, PrivateEndpointTrustedOwnerState } from "./privateEndpointTrustedOwner";
export type PrivateEndpointTrustedOwner = import("./privateEndpointTrustedOwner").PrivateEndpointTrustedOwner;
export const PrivateEndpointTrustedOwner: typeof import("./privateEndpointTrustedOwner").PrivateEndpointTrustedOwner = null as any;
utilities.lazyLoad(exports, ["PrivateEndpointTrustedOwner"], () => require("./privateEndpointTrustedOwner"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SqlUserArgs, SqlUserState } from "./sqlUser";
export type SqlUser = import("./sqlUser").SqlUser;
export const SqlUser: typeof import("./sqlUser").SqlUser = null as any;
utilities.lazyLoad(exports, ["SqlUser"], () => require("./sqlUser"));

export { UserRoleGrantArgs, UserRoleGrantState } from "./userRoleGrant";
export type UserRoleGrant = import("./userRoleGrant").UserRoleGrant;
export const UserRoleGrant: typeof import("./userRoleGrant").UserRoleGrant = null as any;
utilities.lazyLoad(exports, ["UserRoleGrant"], () => require("./userRoleGrant"));

export { UserRoleGrantsArgs, UserRoleGrantsState } from "./userRoleGrants";
export type UserRoleGrants = import("./userRoleGrants").UserRoleGrants;
export const UserRoleGrants: typeof import("./userRoleGrants").UserRoleGrants = null as any;
utilities.lazyLoad(exports, ["UserRoleGrants"], () => require("./userRoleGrants"));

export { VersionDeferralArgs, VersionDeferralState } from "./versionDeferral";
export type VersionDeferral = import("./versionDeferral").VersionDeferral;
export const VersionDeferral: typeof import("./versionDeferral").VersionDeferral = null as any;
utilities.lazyLoad(exports, ["VersionDeferral"], () => require("./versionDeferral"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cockroach:index/allowList:AllowList":
                return new AllowList(name, <any>undefined, { urn })
            case "cockroach:index/apiOidcConfig:ApiOidcConfig":
                return new ApiOidcConfig(name, <any>undefined, { urn })
            case "cockroach:index/caCert:CaCert":
                return new CaCert(name, <any>undefined, { urn })
            case "cockroach:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "cockroach:index/cmek:Cmek":
                return new Cmek(name, <any>undefined, { urn })
            case "cockroach:index/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "cockroach:index/finalizeVersionUpgrade:FinalizeVersionUpgrade":
                return new FinalizeVersionUpgrade(name, <any>undefined, { urn })
            case "cockroach:index/folder:Folder":
                return new Folder(name, <any>undefined, { urn })
            case "cockroach:index/logExportConfig:LogExportConfig":
                return new LogExportConfig(name, <any>undefined, { urn })
            case "cockroach:index/maintenanceWindow:MaintenanceWindow":
                return new MaintenanceWindow(name, <any>undefined, { urn })
            case "cockroach:index/metricExportCloudwatchConfig:MetricExportCloudwatchConfig":
                return new MetricExportCloudwatchConfig(name, <any>undefined, { urn })
            case "cockroach:index/metricExportDatadogConfig:MetricExportDatadogConfig":
                return new MetricExportDatadogConfig(name, <any>undefined, { urn })
            case "cockroach:index/privateEndpointConnection:PrivateEndpointConnection":
                return new PrivateEndpointConnection(name, <any>undefined, { urn })
            case "cockroach:index/privateEndpointServices:PrivateEndpointServices":
                return new PrivateEndpointServices(name, <any>undefined, { urn })
            case "cockroach:index/privateEndpointTrustedOwner:PrivateEndpointTrustedOwner":
                return new PrivateEndpointTrustedOwner(name, <any>undefined, { urn })
            case "cockroach:index/sqlUser:SqlUser":
                return new SqlUser(name, <any>undefined, { urn })
            case "cockroach:index/userRoleGrant:UserRoleGrant":
                return new UserRoleGrant(name, <any>undefined, { urn })
            case "cockroach:index/userRoleGrants:UserRoleGrants":
                return new UserRoleGrants(name, <any>undefined, { urn })
            case "cockroach:index/versionDeferral:VersionDeferral":
                return new VersionDeferral(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cockroach", "index/allowList", _module)
pulumi.runtime.registerResourceModule("cockroach", "index/apiOidcConfig", _module)
pulumi.runtime.registerResourceModule("cockroach", "index/caCert", _module)
pulumi.runtime.registerResourceModule("cockroach", "index/cluster", _module)
pulumi.runtime.registerResourceModule("cockroach", "index/cmek", _module)
pulumi.runtime.registerResourceModule("cockroach", "index/database", _module)
pulumi.runtime.registerResourceModule("cockroach", "index/finalizeVersionUpgrade", _module)
pulumi.runtime.registerResourceModule("cockroach", "index/folder", _module)
pulumi.runtime.registerResourceModule("cockroach", "index/logExportConfig", _module)
pulumi.runtime.registerResourceModule("cockroach", "index/maintenanceWindow", _module)
pulumi.runtime.registerResourceModule("cockroach", "index/metricExportCloudwatchConfig", _module)
pulumi.runtime.registerResourceModule("cockroach", "index/metricExportDatadogConfig", _module)
pulumi.runtime.registerResourceModule("cockroach", "index/privateEndpointConnection", _module)
pulumi.runtime.registerResourceModule("cockroach", "index/privateEndpointServices", _module)
pulumi.runtime.registerResourceModule("cockroach", "index/privateEndpointTrustedOwner", _module)
pulumi.runtime.registerResourceModule("cockroach", "index/sqlUser", _module)
pulumi.runtime.registerResourceModule("cockroach", "index/userRoleGrant", _module)
pulumi.runtime.registerResourceModule("cockroach", "index/userRoleGrants", _module)
pulumi.runtime.registerResourceModule("cockroach", "index/versionDeferral", _module)
pulumi.runtime.registerResourcePackage("cockroach", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cockroach") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
