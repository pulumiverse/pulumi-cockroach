// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cockroach
{
    /// <summary>
    /// Customer-managed encryption keys (CMEK) resource for a single cluster.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cockroach = Pulumiverse.Cockroach;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dedicated = new Cockroach.Cmek("dedicated", new()
    ///     {
    ///         ClusterId = dedicatedCockroachCluster.Id,
    ///         Regions = new[]
    ///         {
    ///             new Cockroach.Inputs.CmekRegionArgs
    ///             {
    ///                 Region = "us-central-1",
    ///                 Key = new Cockroach.Inputs.CmekRegionKeyArgs
    ///                 {
    ///                     AuthPrincipal = "arn:aws:iam::account:role/role-name-with-path",
    ///                     Type = "AWS_KMS",
    ///                     Uri = "arn:aws:kms:us-west-2:111122223333:key/id-of-kms-key",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CockroachResourceType("cockroach:index/cmek:Cmek")]
    public partial class Cmek : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Once CMEK is enabled for a cluster, no new regions can be added to the cluster resource, since they need encryption key
        /// info stored in the CMEK resource. New regions can be added and maintained here instead.
        /// </summary>
        [Output("additionalRegions")]
        public Output<ImmutableArray<Outputs.CmekAdditionalRegion>> AdditionalRegions { get; private set; } = null!;

        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        [Output("regions")]
        public Output<ImmutableArray<Outputs.CmekRegion>> Regions { get; private set; } = null!;

        /// <summary>
        /// Aggregated status of the cluster's encryption key(s).
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a Cmek resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cmek(string name, CmekArgs args, CustomResourceOptions? options = null)
            : base("cockroach:index/cmek:Cmek", name, args ?? new CmekArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cmek(string name, Input<string> id, CmekState? state = null, CustomResourceOptions? options = null)
            : base("cockroach:index/cmek:Cmek", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cmek resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cmek Get(string name, Input<string> id, CmekState? state = null, CustomResourceOptions? options = null)
        {
            return new Cmek(name, id, state, options);
        }
    }

    public sealed class CmekArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalRegions")]
        private InputList<Inputs.CmekAdditionalRegionArgs>? _additionalRegions;

        /// <summary>
        /// Once CMEK is enabled for a cluster, no new regions can be added to the cluster resource, since they need encryption key
        /// info stored in the CMEK resource. New regions can be added and maintained here instead.
        /// </summary>
        public InputList<Inputs.CmekAdditionalRegionArgs> AdditionalRegions
        {
            get => _additionalRegions ?? (_additionalRegions = new InputList<Inputs.CmekAdditionalRegionArgs>());
            set => _additionalRegions = value;
        }

        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("regions", required: true)]
        private InputList<Inputs.CmekRegionArgs>? _regions;
        public InputList<Inputs.CmekRegionArgs> Regions
        {
            get => _regions ?? (_regions = new InputList<Inputs.CmekRegionArgs>());
            set => _regions = value;
        }

        /// <summary>
        /// Aggregated status of the cluster's encryption key(s).
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public CmekArgs()
        {
        }
        public static new CmekArgs Empty => new CmekArgs();
    }

    public sealed class CmekState : global::Pulumi.ResourceArgs
    {
        [Input("additionalRegions")]
        private InputList<Inputs.CmekAdditionalRegionGetArgs>? _additionalRegions;

        /// <summary>
        /// Once CMEK is enabled for a cluster, no new regions can be added to the cluster resource, since they need encryption key
        /// info stored in the CMEK resource. New regions can be added and maintained here instead.
        /// </summary>
        public InputList<Inputs.CmekAdditionalRegionGetArgs> AdditionalRegions
        {
            get => _additionalRegions ?? (_additionalRegions = new InputList<Inputs.CmekAdditionalRegionGetArgs>());
            set => _additionalRegions = value;
        }

        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("regions")]
        private InputList<Inputs.CmekRegionGetArgs>? _regions;
        public InputList<Inputs.CmekRegionGetArgs> Regions
        {
            get => _regions ?? (_regions = new InputList<Inputs.CmekRegionGetArgs>());
            set => _regions = value;
        }

        /// <summary>
        /// Aggregated status of the cluster's encryption key(s).
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public CmekState()
        {
        }
        public static new CmekState Empty => new CmekState();
    }
}
