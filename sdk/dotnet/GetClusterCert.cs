// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cockroach
{
    public static class GetClusterCert
    {
        /// <summary>
        /// TLS certificate for the specified CockroachDB cluster. Certificates for dedicated clusters should be written to `$HOME/Library/CockroachCloud/certs/&lt;cluster name&gt;-ca.crt` on MacOS or Linux, or `$env:appdata\CockroachCloud\certs\&lt;cluster name&gt;-ca.crt` on Windows. 
        /// 
        /// Serverless clusters use the root PostgreSQL CA cert. If it isn't already installed, the certificate can be appended to `$HOME/.postgresql/root.crt` on MacOS or Linux, or `$env:appdata\postgresql\root.crt` on Windows.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cockroach = Pulumi.Cockroach;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var clusterId = config.Require("clusterId");
        ///     var cockroach = Cockroach.GetClusterCert.Invoke(new()
        ///     {
        ///         Id = clusterId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetClusterCertResult> InvokeAsync(GetClusterCertArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterCertResult>("cockroach:index/getClusterCert:getClusterCert", args ?? new GetClusterCertArgs(), options.WithDefaults());

        /// <summary>
        /// TLS certificate for the specified CockroachDB cluster. Certificates for dedicated clusters should be written to `$HOME/Library/CockroachCloud/certs/&lt;cluster name&gt;-ca.crt` on MacOS or Linux, or `$env:appdata\CockroachCloud\certs\&lt;cluster name&gt;-ca.crt` on Windows. 
        /// 
        /// Serverless clusters use the root PostgreSQL CA cert. If it isn't already installed, the certificate can be appended to `$HOME/.postgresql/root.crt` on MacOS or Linux, or `$env:appdata\postgresql\root.crt` on Windows.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cockroach = Pulumi.Cockroach;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var clusterId = config.Require("clusterId");
        ///     var cockroach = Cockroach.GetClusterCert.Invoke(new()
        ///     {
        ///         Id = clusterId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClusterCertResult> Invoke(GetClusterCertInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterCertResult>("cockroach:index/getClusterCert:getClusterCert", args ?? new GetClusterCertInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterCertArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetClusterCertArgs()
        {
        }
        public static new GetClusterCertArgs Empty => new GetClusterCertArgs();
    }

    public sealed class GetClusterCertInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetClusterCertInvokeArgs()
        {
        }
        public static new GetClusterCertInvokeArgs Empty => new GetClusterCertInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterCertResult
    {
        /// <summary>
        /// Certificate contents.
        /// </summary>
        public readonly string Cert;
        /// <summary>
        /// Cluster ID.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetClusterCertResult(
            string cert,

            string id)
        {
            Cert = cert;
            Id = id;
        }
    }
}
