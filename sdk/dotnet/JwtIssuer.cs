// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cockroach
{
    /// <summary>
    /// Configuration to manage external JSON Web Token (JWT) Issuers for authentication to the CockroachDB Cloud API.
    /// </summary>
    [CockroachResourceType("cockroach:index/jwtIssuer:JwtIssuer")]
    public partial class JwtIssuer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The intended audience for consuming the JWT.
        /// </summary>
        [Output("audience")]
        public Output<string> Audience { get; private set; } = null!;

        /// <summary>
        /// Used to identify the user from the external Identity Provider. Defaults to "sub".
        /// </summary>
        [Output("claim")]
        public Output<string?> Claim { get; private set; } = null!;

        /// <summary>
        /// A list of mappings to map the external token identity into CockroachDB Cloud.
        /// </summary>
        [Output("identityMaps")]
        public Output<ImmutableArray<Outputs.JwtIssuerIdentityMap>> IdentityMaps { get; private set; } = null!;

        /// <summary>
        /// The URL of the server issuing JWTs.
        /// </summary>
        [Output("issuerUrl")]
        public Output<string> IssuerUrl { get; private set; } = null!;

        /// <summary>
        /// A set of public keys (JWKS) used to verify the JWT.
        /// </summary>
        [Output("jwks")]
        public Output<string?> Jwks { get; private set; } = null!;


        /// <summary>
        /// Create a JwtIssuer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public JwtIssuer(string name, JwtIssuerArgs args, CustomResourceOptions? options = null)
            : base("cockroach:index/jwtIssuer:JwtIssuer", name, args ?? new JwtIssuerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private JwtIssuer(string name, Input<string> id, JwtIssuerState? state = null, CustomResourceOptions? options = null)
            : base("cockroach:index/jwtIssuer:JwtIssuer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing JwtIssuer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static JwtIssuer Get(string name, Input<string> id, JwtIssuerState? state = null, CustomResourceOptions? options = null)
        {
            return new JwtIssuer(name, id, state, options);
        }
    }

    public sealed class JwtIssuerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The intended audience for consuming the JWT.
        /// </summary>
        [Input("audience", required: true)]
        public Input<string> Audience { get; set; } = null!;

        /// <summary>
        /// Used to identify the user from the external Identity Provider. Defaults to "sub".
        /// </summary>
        [Input("claim")]
        public Input<string>? Claim { get; set; }

        [Input("identityMaps")]
        private InputList<Inputs.JwtIssuerIdentityMapArgs>? _identityMaps;

        /// <summary>
        /// A list of mappings to map the external token identity into CockroachDB Cloud.
        /// </summary>
        public InputList<Inputs.JwtIssuerIdentityMapArgs> IdentityMaps
        {
            get => _identityMaps ?? (_identityMaps = new InputList<Inputs.JwtIssuerIdentityMapArgs>());
            set => _identityMaps = value;
        }

        /// <summary>
        /// The URL of the server issuing JWTs.
        /// </summary>
        [Input("issuerUrl", required: true)]
        public Input<string> IssuerUrl { get; set; } = null!;

        /// <summary>
        /// A set of public keys (JWKS) used to verify the JWT.
        /// </summary>
        [Input("jwks")]
        public Input<string>? Jwks { get; set; }

        public JwtIssuerArgs()
        {
        }
        public static new JwtIssuerArgs Empty => new JwtIssuerArgs();
    }

    public sealed class JwtIssuerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The intended audience for consuming the JWT.
        /// </summary>
        [Input("audience")]
        public Input<string>? Audience { get; set; }

        /// <summary>
        /// Used to identify the user from the external Identity Provider. Defaults to "sub".
        /// </summary>
        [Input("claim")]
        public Input<string>? Claim { get; set; }

        [Input("identityMaps")]
        private InputList<Inputs.JwtIssuerIdentityMapGetArgs>? _identityMaps;

        /// <summary>
        /// A list of mappings to map the external token identity into CockroachDB Cloud.
        /// </summary>
        public InputList<Inputs.JwtIssuerIdentityMapGetArgs> IdentityMaps
        {
            get => _identityMaps ?? (_identityMaps = new InputList<Inputs.JwtIssuerIdentityMapGetArgs>());
            set => _identityMaps = value;
        }

        /// <summary>
        /// The URL of the server issuing JWTs.
        /// </summary>
        [Input("issuerUrl")]
        public Input<string>? IssuerUrl { get; set; }

        /// <summary>
        /// A set of public keys (JWKS) used to verify the JWT.
        /// </summary>
        [Input("jwks")]
        public Input<string>? Jwks { get; set; }

        public JwtIssuerState()
        {
        }
        public static new JwtIssuerState Empty => new JwtIssuerState();
    }
}
