// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cockroach
{
    /// <summary>
    /// Maintenance window configuration for a cluster.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cockroach = Pulumiverse.Cockroach;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var clusterId = config.Require("clusterId");
    ///     var offsetDuration = config.GetDouble("offsetDuration") ?? 172800;
    ///     var windowDuration = config.GetDouble("windowDuration") ?? 21600;
    ///     var example = new Cockroach.MaintenanceWindow("example", new()
    ///     {
    ///         ClusterId = clusterId,
    ///         OffsetDuration = offsetDuration,
    ///         WindowDuration = windowDuration,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CockroachResourceType("cockroach:index/maintenanceWindow:MaintenanceWindow")]
    public partial class MaintenanceWindow : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Duration in seconds from the beginning of each Monday (UTC) after which the maintenance window starts.
        /// </summary>
        [Output("offsetDuration")]
        public Output<int> OffsetDuration { get; private set; } = null!;

        /// <summary>
        /// Duration in seconds that the maintenance window will remain active for after it starts.
        /// </summary>
        [Output("windowDuration")]
        public Output<int> WindowDuration { get; private set; } = null!;


        /// <summary>
        /// Create a MaintenanceWindow resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MaintenanceWindow(string name, MaintenanceWindowArgs args, CustomResourceOptions? options = null)
            : base("cockroach:index/maintenanceWindow:MaintenanceWindow", name, args ?? new MaintenanceWindowArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MaintenanceWindow(string name, Input<string> id, MaintenanceWindowState? state = null, CustomResourceOptions? options = null)
            : base("cockroach:index/maintenanceWindow:MaintenanceWindow", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MaintenanceWindow resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MaintenanceWindow Get(string name, Input<string> id, MaintenanceWindowState? state = null, CustomResourceOptions? options = null)
        {
            return new MaintenanceWindow(name, id, state, options);
        }
    }

    public sealed class MaintenanceWindowArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Duration in seconds from the beginning of each Monday (UTC) after which the maintenance window starts.
        /// </summary>
        [Input("offsetDuration", required: true)]
        public Input<int> OffsetDuration { get; set; } = null!;

        /// <summary>
        /// Duration in seconds that the maintenance window will remain active for after it starts.
        /// </summary>
        [Input("windowDuration", required: true)]
        public Input<int> WindowDuration { get; set; } = null!;

        public MaintenanceWindowArgs()
        {
        }
        public static new MaintenanceWindowArgs Empty => new MaintenanceWindowArgs();
    }

    public sealed class MaintenanceWindowState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Duration in seconds from the beginning of each Monday (UTC) after which the maintenance window starts.
        /// </summary>
        [Input("offsetDuration")]
        public Input<int>? OffsetDuration { get; set; }

        /// <summary>
        /// Duration in seconds that the maintenance window will remain active for after it starts.
        /// </summary>
        [Input("windowDuration")]
        public Input<int>? WindowDuration { get; set; }

        public MaintenanceWindowState()
        {
        }
        public static new MaintenanceWindowState Empty => new MaintenanceWindowState();
    }
}
