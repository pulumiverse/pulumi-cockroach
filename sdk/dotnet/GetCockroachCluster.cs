// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cockroach
{
    public static class GetCockroachCluster
    {
        /// <summary>
        /// CockroachDB Cloud cluster. Can be Dedicated or Serverless.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cockroach = Pulumi.Cockroach;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var clusterId = config.Require("clusterId");
        ///     var cockroach = Cockroach.GetCockroachCluster.Invoke(new()
        ///     {
        ///         Id = clusterId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCockroachClusterResult> InvokeAsync(GetCockroachClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCockroachClusterResult>("cockroach:index/getCockroachCluster:getCockroachCluster", args ?? new GetCockroachClusterArgs(), options.WithDefaults());

        /// <summary>
        /// CockroachDB Cloud cluster. Can be Dedicated or Serverless.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cockroach = Pulumi.Cockroach;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var clusterId = config.Require("clusterId");
        ///     var cockroach = Cockroach.GetCockroachCluster.Invoke(new()
        ///     {
        ///         Id = clusterId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCockroachClusterResult> Invoke(GetCockroachClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCockroachClusterResult>("cockroach:index/getCockroachCluster:getCockroachCluster", args ?? new GetCockroachClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCockroachClusterArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetCockroachClusterArgs()
        {
        }
        public static new GetCockroachClusterArgs Empty => new GetCockroachClusterArgs();
    }

    public sealed class GetCockroachClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetCockroachClusterInvokeArgs()
        {
        }
        public static new GetCockroachClusterInvokeArgs Empty => new GetCockroachClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetCockroachClusterResult
    {
        public readonly string AccountId;
        public readonly Outputs.GetCockroachClusterBackupConfigResult BackupConfig;
        public readonly string CloudProvider;
        public readonly string CockroachVersion;
        public readonly string CreatorId;
        public readonly Outputs.GetCockroachClusterDedicatedResult Dedicated;
        public readonly bool DeleteProtection;
        public readonly string Id;
        public readonly string Name;
        public readonly string OperationStatus;
        public readonly string ParentId;
        public readonly string Plan;
        public readonly ImmutableArray<Outputs.GetCockroachClusterRegionResult> Regions;
        public readonly Outputs.GetCockroachClusterServerlessResult Serverless;
        public readonly string State;
        public readonly string UpgradeStatus;

        [OutputConstructor]
        private GetCockroachClusterResult(
            string accountId,

            Outputs.GetCockroachClusterBackupConfigResult backupConfig,

            string cloudProvider,

            string cockroachVersion,

            string creatorId,

            Outputs.GetCockroachClusterDedicatedResult dedicated,

            bool deleteProtection,

            string id,

            string name,

            string operationStatus,

            string parentId,

            string plan,

            ImmutableArray<Outputs.GetCockroachClusterRegionResult> regions,

            Outputs.GetCockroachClusterServerlessResult serverless,

            string state,

            string upgradeStatus)
        {
            AccountId = accountId;
            BackupConfig = backupConfig;
            CloudProvider = cloudProvider;
            CockroachVersion = cockroachVersion;
            CreatorId = creatorId;
            Dedicated = dedicated;
            DeleteProtection = deleteProtection;
            Id = id;
            Name = name;
            OperationStatus = operationStatus;
            ParentId = parentId;
            Plan = plan;
            Regions = regions;
            Serverless = serverless;
            State = state;
            UpgradeStatus = upgradeStatus;
        }
    }
}
