// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cockroach
{
    public static class GetFolder
    {
        /// <summary>
        /// A CockroachDB Cloud folder. Folders can contain clusters or other folders.  They can be used to group resources together for the purposes of access control, organization or fine grained invoicing.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cockroach = Pulumi.Cockroach;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var prodFolderId = config.Require("prodFolderId");
        ///     var team1 = Cockroach.GetFolder.Invoke(new()
        ///     {
        ///         Path = "/prod/team1",
        ///     });
        /// 
        ///     var prod = Cockroach.GetFolder.Invoke(new()
        ///     {
        ///         Id = prodFolderId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetFolderResult> InvokeAsync(GetFolderArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFolderResult>("cockroach:index/getFolder:getFolder", args ?? new GetFolderArgs(), options.WithDefaults());

        /// <summary>
        /// A CockroachDB Cloud folder. Folders can contain clusters or other folders.  They can be used to group resources together for the purposes of access control, organization or fine grained invoicing.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cockroach = Pulumi.Cockroach;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var prodFolderId = config.Require("prodFolderId");
        ///     var team1 = Cockroach.GetFolder.Invoke(new()
        ///     {
        ///         Path = "/prod/team1",
        ///     });
        /// 
        ///     var prod = Cockroach.GetFolder.Invoke(new()
        ///     {
        ///         Id = prodFolderId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFolderResult> Invoke(GetFolderInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFolderResult>("cockroach:index/getFolder:getFolder", args ?? new GetFolderInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// A CockroachDB Cloud folder. Folders can contain clusters or other folders.  They can be used to group resources together for the purposes of access control, organization or fine grained invoicing.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cockroach = Pulumi.Cockroach;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var prodFolderId = config.Require("prodFolderId");
        ///     var team1 = Cockroach.GetFolder.Invoke(new()
        ///     {
        ///         Path = "/prod/team1",
        ///     });
        /// 
        ///     var prod = Cockroach.GetFolder.Invoke(new()
        ///     {
        ///         Id = prodFolderId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFolderResult> Invoke(GetFolderInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFolderResult>("cockroach:index/getFolder:getFolder", args ?? new GetFolderInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFolderArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id the folder.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// An absolute path to the folder. Trailing slashes are optional. (i.e. /folder1/folder2)
        /// </summary>
        [Input("path")]
        public string? Path { get; set; }

        public GetFolderArgs()
        {
        }
        public static new GetFolderArgs Empty => new GetFolderArgs();
    }

    public sealed class GetFolderInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id the folder.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// An absolute path to the folder. Trailing slashes are optional. (i.e. /folder1/folder2)
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        public GetFolderInvokeArgs()
        {
        }
        public static new GetFolderInvokeArgs Empty => new GetFolderInvokeArgs();
    }


    [OutputType]
    public sealed class GetFolderResult
    {
        /// <summary>
        /// The id the folder.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Name of the folder.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The ID of the folders's parent folder. 'root' is used for a folder at the root level.
        /// </summary>
        public readonly string ParentId;
        /// <summary>
        /// An absolute path to the folder. Trailing slashes are optional. (i.e. /folder1/folder2)
        /// </summary>
        public readonly string? Path;

        [OutputConstructor]
        private GetFolderResult(
            string? id,

            string name,

            string parentId,

            string? path)
        {
            Id = id;
            Name = name;
            ParentId = parentId;
            Path = path;
        }
    }
}
