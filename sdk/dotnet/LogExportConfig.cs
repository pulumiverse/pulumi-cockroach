// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cockroach
{
    /// <summary>
    /// Log Export configuration for a cluster.
    /// </summary>
    [CockroachResourceType("cockroach:index/logExportConfig:LogExportConfig")]
    public partial class LogExportConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Either the AWS Role ARN that identifies a role that the cluster account can assume to write to CloudWatch or the GCP
        /// Project ID that the cluster service account has permissions to write to for cloud logging.
        /// </summary>
        [Output("authPrincipal")]
        public Output<string> AuthPrincipal { get; private set; } = null!;

        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Indicates when log export was initially configured.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("groups")]
        public Output<ImmutableArray<Outputs.LogExportConfigGroup>> Groups { get; private set; } = null!;

        /// <summary>
        /// An identifier for the logs in the customer's log sink.
        /// </summary>
        [Output("logName")]
        public Output<string> LogName { get; private set; } = null!;

        /// <summary>
        /// Controls what CRDB channels do not get exported.
        /// </summary>
        [Output("omittedChannels")]
        public Output<ImmutableArray<string>> OmittedChannels { get; private set; } = null!;

        /// <summary>
        /// Controls whether logs are redacted before forwarding to customer sinks.
        /// </summary>
        [Output("redact")]
        public Output<bool?> Redact { get; private set; } = null!;

        /// <summary>
        /// Controls whether all logs are sent to a specific region in the customer sink.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Encodes the possible states that a log export configuration can be in as it is created, deployed, and disabled.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The cloud selection being exported to along with the cloud logging platform. Possible values are: * AWS_CLOUDWATCH *
        /// GCP_CLOUD_LOGGING
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Indicates when the log export configuration was last updated.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// Elaborates on the log export status and hints at how to fix issues that may have occurred during asynchronous
        /// operations.
        /// </summary>
        [Output("userMessage")]
        public Output<string> UserMessage { get; private set; } = null!;


        /// <summary>
        /// Create a LogExportConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogExportConfig(string name, LogExportConfigArgs args, CustomResourceOptions? options = null)
            : base("cockroach:index/logExportConfig:LogExportConfig", name, args ?? new LogExportConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogExportConfig(string name, Input<string> id, LogExportConfigState? state = null, CustomResourceOptions? options = null)
            : base("cockroach:index/logExportConfig:LogExportConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogExportConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogExportConfig Get(string name, Input<string> id, LogExportConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new LogExportConfig(name, id, state, options);
        }
    }

    public sealed class LogExportConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Either the AWS Role ARN that identifies a role that the cluster account can assume to write to CloudWatch or the GCP
        /// Project ID that the cluster service account has permissions to write to for cloud logging.
        /// </summary>
        [Input("authPrincipal", required: true)]
        public Input<string> AuthPrincipal { get; set; } = null!;

        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("groups")]
        private InputList<Inputs.LogExportConfigGroupArgs>? _groups;
        public InputList<Inputs.LogExportConfigGroupArgs> Groups
        {
            get => _groups ?? (_groups = new InputList<Inputs.LogExportConfigGroupArgs>());
            set => _groups = value;
        }

        /// <summary>
        /// An identifier for the logs in the customer's log sink.
        /// </summary>
        [Input("logName", required: true)]
        public Input<string> LogName { get; set; } = null!;

        [Input("omittedChannels")]
        private InputList<string>? _omittedChannels;

        /// <summary>
        /// Controls what CRDB channels do not get exported.
        /// </summary>
        public InputList<string> OmittedChannels
        {
            get => _omittedChannels ?? (_omittedChannels = new InputList<string>());
            set => _omittedChannels = value;
        }

        /// <summary>
        /// Controls whether logs are redacted before forwarding to customer sinks.
        /// </summary>
        [Input("redact")]
        public Input<bool>? Redact { get; set; }

        /// <summary>
        /// Controls whether all logs are sent to a specific region in the customer sink.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The cloud selection being exported to along with the cloud logging platform. Possible values are: * AWS_CLOUDWATCH *
        /// GCP_CLOUD_LOGGING
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public LogExportConfigArgs()
        {
        }
        public static new LogExportConfigArgs Empty => new LogExportConfigArgs();
    }

    public sealed class LogExportConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Either the AWS Role ARN that identifies a role that the cluster account can assume to write to CloudWatch or the GCP
        /// Project ID that the cluster service account has permissions to write to for cloud logging.
        /// </summary>
        [Input("authPrincipal")]
        public Input<string>? AuthPrincipal { get; set; }

        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Indicates when log export was initially configured.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("groups")]
        private InputList<Inputs.LogExportConfigGroupGetArgs>? _groups;
        public InputList<Inputs.LogExportConfigGroupGetArgs> Groups
        {
            get => _groups ?? (_groups = new InputList<Inputs.LogExportConfigGroupGetArgs>());
            set => _groups = value;
        }

        /// <summary>
        /// An identifier for the logs in the customer's log sink.
        /// </summary>
        [Input("logName")]
        public Input<string>? LogName { get; set; }

        [Input("omittedChannels")]
        private InputList<string>? _omittedChannels;

        /// <summary>
        /// Controls what CRDB channels do not get exported.
        /// </summary>
        public InputList<string> OmittedChannels
        {
            get => _omittedChannels ?? (_omittedChannels = new InputList<string>());
            set => _omittedChannels = value;
        }

        /// <summary>
        /// Controls whether logs are redacted before forwarding to customer sinks.
        /// </summary>
        [Input("redact")]
        public Input<bool>? Redact { get; set; }

        /// <summary>
        /// Controls whether all logs are sent to a specific region in the customer sink.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Encodes the possible states that a log export configuration can be in as it is created, deployed, and disabled.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The cloud selection being exported to along with the cloud logging platform. Possible values are: * AWS_CLOUDWATCH *
        /// GCP_CLOUD_LOGGING
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Indicates when the log export configuration was last updated.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// Elaborates on the log export status and hints at how to fix issues that may have occurred during asynchronous
        /// operations.
        /// </summary>
        [Input("userMessage")]
        public Input<string>? UserMessage { get; set; }

        public LogExportConfigState()
        {
        }
        public static new LogExportConfigState Empty => new LogExportConfigState();
    }
}
