// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cockroach
{
    public static class GetConnectionString
    {
        /// <summary>
        /// Generic connection string for a cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cockroach = Pulumi.Cockroach;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var clusterId = config.Require("clusterId");
        ///     var sqlUserName = config.Require("sqlUserName");
        ///     var sqlUserPassword = config.Require("sqlUserPassword");
        ///     var database = config.Require("database");
        ///     var os = config.Require("os");
        ///     var cockroach = Cockroach.GetConnectionString.Invoke(new()
        ///     {
        ///         Id = clusterId,
        ///         SqlUser = sqlUserName,
        ///         Password = sqlUserPassword,
        ///         Database = database,
        ///         Os = os,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetConnectionStringResult> InvokeAsync(GetConnectionStringArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConnectionStringResult>("cockroach:index/getConnectionString:getConnectionString", args ?? new GetConnectionStringArgs(), options.WithDefaults());

        /// <summary>
        /// Generic connection string for a cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cockroach = Pulumi.Cockroach;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var clusterId = config.Require("clusterId");
        ///     var sqlUserName = config.Require("sqlUserName");
        ///     var sqlUserPassword = config.Require("sqlUserPassword");
        ///     var database = config.Require("database");
        ///     var os = config.Require("os");
        ///     var cockroach = Cockroach.GetConnectionString.Invoke(new()
        ///     {
        ///         Id = clusterId,
        ///         SqlUser = sqlUserName,
        ///         Password = sqlUserPassword,
        ///         Database = database,
        ///         Os = os,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetConnectionStringResult> Invoke(GetConnectionStringInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectionStringResult>("cockroach:index/getConnectionString:getConnectionString", args ?? new GetConnectionStringInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Generic connection string for a cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cockroach = Pulumi.Cockroach;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var clusterId = config.Require("clusterId");
        ///     var sqlUserName = config.Require("sqlUserName");
        ///     var sqlUserPassword = config.Require("sqlUserPassword");
        ///     var database = config.Require("database");
        ///     var os = config.Require("os");
        ///     var cockroach = Cockroach.GetConnectionString.Invoke(new()
        ///     {
        ///         Id = clusterId,
        ///         SqlUser = sqlUserName,
        ///         Password = sqlUserPassword,
        ///         Database = database,
        ///         Os = os,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetConnectionStringResult> Invoke(GetConnectionStringInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectionStringResult>("cockroach:index/getConnectionString:getConnectionString", args ?? new GetConnectionStringInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectionStringArgs : global::Pulumi.InvokeArgs
    {
        [Input("database")]
        public string? Database { get; set; }

        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("os")]
        public string? Os { get; set; }

        [Input("password")]
        private string? _password;
        public string? Password
        {
            get => _password;
            set => _password = value;
        }

        [Input("sqlUser")]
        public string? SqlUser { get; set; }

        public GetConnectionStringArgs()
        {
        }
        public static new GetConnectionStringArgs Empty => new GetConnectionStringArgs();
    }

    public sealed class GetConnectionStringInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("database")]
        public Input<string>? Database { get; set; }

        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("os")]
        public Input<string>? Os { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("sqlUser")]
        public Input<string>? SqlUser { get; set; }

        public GetConnectionStringInvokeArgs()
        {
        }
        public static new GetConnectionStringInvokeArgs Empty => new GetConnectionStringInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectionStringResult
    {
        public readonly Outputs.GetConnectionStringConnectionParamsResult ConnectionParams;
        public readonly string ConnectionString;
        public readonly string Database;
        public readonly string Id;
        public readonly string Os;
        public readonly string? Password;
        public readonly string? SqlUser;

        [OutputConstructor]
        private GetConnectionStringResult(
            Outputs.GetConnectionStringConnectionParamsResult connectionParams,

            string connectionString,

            string database,

            string id,

            string os,

            string? password,

            string? sqlUser)
        {
            ConnectionParams = connectionParams;
            ConnectionString = connectionString;
            Database = database;
            Id = id;
            Os = os;
            Password = password;
            SqlUser = sqlUser;
        }
    }
}
