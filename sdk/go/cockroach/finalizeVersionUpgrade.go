// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cockroach

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-cockroach/sdk/go/cockroach/internal"
)

// Utility resource that represents the one-time action of finalizing a cluster's pending CockroachDB version upgrade.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-cockroach/sdk/go/cockroach"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			clusterId := cfg.Require("clusterId")
//			cockroachVersion := cfg.Require("cockroachVersion")
//			_, err := cockroach.NewFinalizeVersionUpgrade(ctx, "cockroach", &cockroach.FinalizeVersionUpgradeArgs{
//				ClusterId:        pulumi.String(clusterId),
//				CockroachVersion: pulumi.String(cockroachVersion),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FinalizeVersionUpgrade struct {
	pulumi.CustomResourceState

	// Cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Major version of the cluster to be finalized.
	CockroachVersion pulumi.StringOutput `pulumi:"cockroachVersion"`
}

// NewFinalizeVersionUpgrade registers a new resource with the given unique name, arguments, and options.
func NewFinalizeVersionUpgrade(ctx *pulumi.Context,
	name string, args *FinalizeVersionUpgradeArgs, opts ...pulumi.ResourceOption) (*FinalizeVersionUpgrade, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.CockroachVersion == nil {
		return nil, errors.New("invalid value for required argument 'CockroachVersion'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FinalizeVersionUpgrade
	err := ctx.RegisterResource("cockroach:index/finalizeVersionUpgrade:FinalizeVersionUpgrade", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFinalizeVersionUpgrade gets an existing FinalizeVersionUpgrade resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFinalizeVersionUpgrade(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FinalizeVersionUpgradeState, opts ...pulumi.ResourceOption) (*FinalizeVersionUpgrade, error) {
	var resource FinalizeVersionUpgrade
	err := ctx.ReadResource("cockroach:index/finalizeVersionUpgrade:FinalizeVersionUpgrade", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FinalizeVersionUpgrade resources.
type finalizeVersionUpgradeState struct {
	// Cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// Major version of the cluster to be finalized.
	CockroachVersion *string `pulumi:"cockroachVersion"`
}

type FinalizeVersionUpgradeState struct {
	// Cluster ID.
	ClusterId pulumi.StringPtrInput
	// Major version of the cluster to be finalized.
	CockroachVersion pulumi.StringPtrInput
}

func (FinalizeVersionUpgradeState) ElementType() reflect.Type {
	return reflect.TypeOf((*finalizeVersionUpgradeState)(nil)).Elem()
}

type finalizeVersionUpgradeArgs struct {
	// Cluster ID.
	ClusterId string `pulumi:"clusterId"`
	// Major version of the cluster to be finalized.
	CockroachVersion string `pulumi:"cockroachVersion"`
}

// The set of arguments for constructing a FinalizeVersionUpgrade resource.
type FinalizeVersionUpgradeArgs struct {
	// Cluster ID.
	ClusterId pulumi.StringInput
	// Major version of the cluster to be finalized.
	CockroachVersion pulumi.StringInput
}

func (FinalizeVersionUpgradeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*finalizeVersionUpgradeArgs)(nil)).Elem()
}

type FinalizeVersionUpgradeInput interface {
	pulumi.Input

	ToFinalizeVersionUpgradeOutput() FinalizeVersionUpgradeOutput
	ToFinalizeVersionUpgradeOutputWithContext(ctx context.Context) FinalizeVersionUpgradeOutput
}

func (*FinalizeVersionUpgrade) ElementType() reflect.Type {
	return reflect.TypeOf((**FinalizeVersionUpgrade)(nil)).Elem()
}

func (i *FinalizeVersionUpgrade) ToFinalizeVersionUpgradeOutput() FinalizeVersionUpgradeOutput {
	return i.ToFinalizeVersionUpgradeOutputWithContext(context.Background())
}

func (i *FinalizeVersionUpgrade) ToFinalizeVersionUpgradeOutputWithContext(ctx context.Context) FinalizeVersionUpgradeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FinalizeVersionUpgradeOutput)
}

// FinalizeVersionUpgradeArrayInput is an input type that accepts FinalizeVersionUpgradeArray and FinalizeVersionUpgradeArrayOutput values.
// You can construct a concrete instance of `FinalizeVersionUpgradeArrayInput` via:
//
//	FinalizeVersionUpgradeArray{ FinalizeVersionUpgradeArgs{...} }
type FinalizeVersionUpgradeArrayInput interface {
	pulumi.Input

	ToFinalizeVersionUpgradeArrayOutput() FinalizeVersionUpgradeArrayOutput
	ToFinalizeVersionUpgradeArrayOutputWithContext(context.Context) FinalizeVersionUpgradeArrayOutput
}

type FinalizeVersionUpgradeArray []FinalizeVersionUpgradeInput

func (FinalizeVersionUpgradeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FinalizeVersionUpgrade)(nil)).Elem()
}

func (i FinalizeVersionUpgradeArray) ToFinalizeVersionUpgradeArrayOutput() FinalizeVersionUpgradeArrayOutput {
	return i.ToFinalizeVersionUpgradeArrayOutputWithContext(context.Background())
}

func (i FinalizeVersionUpgradeArray) ToFinalizeVersionUpgradeArrayOutputWithContext(ctx context.Context) FinalizeVersionUpgradeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FinalizeVersionUpgradeArrayOutput)
}

// FinalizeVersionUpgradeMapInput is an input type that accepts FinalizeVersionUpgradeMap and FinalizeVersionUpgradeMapOutput values.
// You can construct a concrete instance of `FinalizeVersionUpgradeMapInput` via:
//
//	FinalizeVersionUpgradeMap{ "key": FinalizeVersionUpgradeArgs{...} }
type FinalizeVersionUpgradeMapInput interface {
	pulumi.Input

	ToFinalizeVersionUpgradeMapOutput() FinalizeVersionUpgradeMapOutput
	ToFinalizeVersionUpgradeMapOutputWithContext(context.Context) FinalizeVersionUpgradeMapOutput
}

type FinalizeVersionUpgradeMap map[string]FinalizeVersionUpgradeInput

func (FinalizeVersionUpgradeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FinalizeVersionUpgrade)(nil)).Elem()
}

func (i FinalizeVersionUpgradeMap) ToFinalizeVersionUpgradeMapOutput() FinalizeVersionUpgradeMapOutput {
	return i.ToFinalizeVersionUpgradeMapOutputWithContext(context.Background())
}

func (i FinalizeVersionUpgradeMap) ToFinalizeVersionUpgradeMapOutputWithContext(ctx context.Context) FinalizeVersionUpgradeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FinalizeVersionUpgradeMapOutput)
}

type FinalizeVersionUpgradeOutput struct{ *pulumi.OutputState }

func (FinalizeVersionUpgradeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FinalizeVersionUpgrade)(nil)).Elem()
}

func (o FinalizeVersionUpgradeOutput) ToFinalizeVersionUpgradeOutput() FinalizeVersionUpgradeOutput {
	return o
}

func (o FinalizeVersionUpgradeOutput) ToFinalizeVersionUpgradeOutputWithContext(ctx context.Context) FinalizeVersionUpgradeOutput {
	return o
}

// Cluster ID.
func (o FinalizeVersionUpgradeOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *FinalizeVersionUpgrade) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Major version of the cluster to be finalized.
func (o FinalizeVersionUpgradeOutput) CockroachVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *FinalizeVersionUpgrade) pulumi.StringOutput { return v.CockroachVersion }).(pulumi.StringOutput)
}

type FinalizeVersionUpgradeArrayOutput struct{ *pulumi.OutputState }

func (FinalizeVersionUpgradeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FinalizeVersionUpgrade)(nil)).Elem()
}

func (o FinalizeVersionUpgradeArrayOutput) ToFinalizeVersionUpgradeArrayOutput() FinalizeVersionUpgradeArrayOutput {
	return o
}

func (o FinalizeVersionUpgradeArrayOutput) ToFinalizeVersionUpgradeArrayOutputWithContext(ctx context.Context) FinalizeVersionUpgradeArrayOutput {
	return o
}

func (o FinalizeVersionUpgradeArrayOutput) Index(i pulumi.IntInput) FinalizeVersionUpgradeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FinalizeVersionUpgrade {
		return vs[0].([]*FinalizeVersionUpgrade)[vs[1].(int)]
	}).(FinalizeVersionUpgradeOutput)
}

type FinalizeVersionUpgradeMapOutput struct{ *pulumi.OutputState }

func (FinalizeVersionUpgradeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FinalizeVersionUpgrade)(nil)).Elem()
}

func (o FinalizeVersionUpgradeMapOutput) ToFinalizeVersionUpgradeMapOutput() FinalizeVersionUpgradeMapOutput {
	return o
}

func (o FinalizeVersionUpgradeMapOutput) ToFinalizeVersionUpgradeMapOutputWithContext(ctx context.Context) FinalizeVersionUpgradeMapOutput {
	return o
}

func (o FinalizeVersionUpgradeMapOutput) MapIndex(k pulumi.StringInput) FinalizeVersionUpgradeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FinalizeVersionUpgrade {
		return vs[0].(map[string]*FinalizeVersionUpgrade)[vs[1].(string)]
	}).(FinalizeVersionUpgradeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FinalizeVersionUpgradeInput)(nil)).Elem(), &FinalizeVersionUpgrade{})
	pulumi.RegisterInputType(reflect.TypeOf((*FinalizeVersionUpgradeArrayInput)(nil)).Elem(), FinalizeVersionUpgradeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FinalizeVersionUpgradeMapInput)(nil)).Elem(), FinalizeVersionUpgradeMap{})
	pulumi.RegisterOutputType(FinalizeVersionUpgradeOutput{})
	pulumi.RegisterOutputType(FinalizeVersionUpgradeArrayOutput{})
	pulumi.RegisterOutputType(FinalizeVersionUpgradeMapOutput{})
}
