// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cockroach

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-cockroach/sdk/go/cockroach/internal"
)

// Generic connection string for a cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-cockroach/sdk/go/cockroach"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			clusterId := cfg.Require("clusterId")
//			sqlUserName := cfg.Require("sqlUserName")
//			sqlUserPassword := cfg.Require("sqlUserPassword")
//			database := cfg.Require("database")
//			os := cfg.Require("os")
//			_, err := cockroach.GetConnectionString(ctx, &cockroach.GetConnectionStringArgs{
//				Id:       clusterId,
//				SqlUser:  pulumi.StringRef(sqlUserName),
//				Password: pulumi.StringRef(sqlUserPassword),
//				Database: pulumi.StringRef(database),
//				Os:       pulumi.StringRef(os),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetConnectionString(ctx *pulumi.Context, args *GetConnectionStringArgs, opts ...pulumi.InvokeOption) (*GetConnectionStringResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetConnectionStringResult
	err := ctx.Invoke("cockroach:index/getConnectionString:getConnectionString", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnectionString.
type GetConnectionStringArgs struct {
	Database *string `pulumi:"database"`
	Id       string  `pulumi:"id"`
	Os       *string `pulumi:"os"`
	Password *string `pulumi:"password"`
	SqlUser  *string `pulumi:"sqlUser"`
}

// A collection of values returned by getConnectionString.
type GetConnectionStringResult struct {
	ConnectionParams GetConnectionStringConnectionParams `pulumi:"connectionParams"`
	ConnectionString string                              `pulumi:"connectionString"`
	Database         string                              `pulumi:"database"`
	Id               string                              `pulumi:"id"`
	Os               string                              `pulumi:"os"`
	Password         *string                             `pulumi:"password"`
	SqlUser          *string                             `pulumi:"sqlUser"`
}

func GetConnectionStringOutput(ctx *pulumi.Context, args GetConnectionStringOutputArgs, opts ...pulumi.InvokeOption) GetConnectionStringResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetConnectionStringResultOutput, error) {
			args := v.(GetConnectionStringArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetConnectionStringResult
			secret, err := ctx.InvokePackageRaw("cockroach:index/getConnectionString:getConnectionString", args, &rv, "", opts...)
			if err != nil {
				return GetConnectionStringResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetConnectionStringResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetConnectionStringResultOutput), nil
			}
			return output, nil
		}).(GetConnectionStringResultOutput)
}

// A collection of arguments for invoking getConnectionString.
type GetConnectionStringOutputArgs struct {
	Database pulumi.StringPtrInput `pulumi:"database"`
	Id       pulumi.StringInput    `pulumi:"id"`
	Os       pulumi.StringPtrInput `pulumi:"os"`
	Password pulumi.StringPtrInput `pulumi:"password"`
	SqlUser  pulumi.StringPtrInput `pulumi:"sqlUser"`
}

func (GetConnectionStringOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConnectionStringArgs)(nil)).Elem()
}

// A collection of values returned by getConnectionString.
type GetConnectionStringResultOutput struct{ *pulumi.OutputState }

func (GetConnectionStringResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConnectionStringResult)(nil)).Elem()
}

func (o GetConnectionStringResultOutput) ToGetConnectionStringResultOutput() GetConnectionStringResultOutput {
	return o
}

func (o GetConnectionStringResultOutput) ToGetConnectionStringResultOutputWithContext(ctx context.Context) GetConnectionStringResultOutput {
	return o
}

func (o GetConnectionStringResultOutput) ConnectionParams() GetConnectionStringConnectionParamsOutput {
	return o.ApplyT(func(v GetConnectionStringResult) GetConnectionStringConnectionParams { return v.ConnectionParams }).(GetConnectionStringConnectionParamsOutput)
}

func (o GetConnectionStringResultOutput) ConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectionStringResult) string { return v.ConnectionString }).(pulumi.StringOutput)
}

func (o GetConnectionStringResultOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectionStringResult) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetConnectionStringResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectionStringResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetConnectionStringResultOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectionStringResult) string { return v.Os }).(pulumi.StringOutput)
}

func (o GetConnectionStringResultOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetConnectionStringResult) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o GetConnectionStringResultOutput) SqlUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetConnectionStringResult) *string { return v.SqlUser }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetConnectionStringResultOutput{})
}
