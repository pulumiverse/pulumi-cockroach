// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cockroach

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-cockroach/sdk/go/cockroach/internal"
)

var _ = internal.GetEnvOrDefault

type ApiOidcConfigIdentityMap struct {
	// The username (email or service account id) of the CC user that the token should map to.
	CcIdentity string `pulumi:"ccIdentity"`
	// Indicates that the tokenPrincipal field is a regex value.
	IsRegex *bool `pulumi:"isRegex"`
	// The token value that needs to be mapped.
	TokenIdentity string `pulumi:"tokenIdentity"`
}

// ApiOidcConfigIdentityMapInput is an input type that accepts ApiOidcConfigIdentityMap and ApiOidcConfigIdentityMapOutput values.
// You can construct a concrete instance of `ApiOidcConfigIdentityMapInput` via:
//
//	ApiOidcConfigIdentityMap{ "key": ApiOidcConfigIdentityArgs{...} }
type ApiOidcConfigIdentityMapInput interface {
	pulumi.Input

	ToApiOidcConfigIdentityMapOutput() ApiOidcConfigIdentityMapOutput
	ToApiOidcConfigIdentityMapOutputWithContext(context.Context) ApiOidcConfigIdentityMapOutput
}

type ApiOidcConfigIdentityMapArgs struct {
	// The username (email or service account id) of the CC user that the token should map to.
	CcIdentity pulumi.StringInput `pulumi:"ccIdentity"`
	// Indicates that the tokenPrincipal field is a regex value.
	IsRegex pulumi.BoolPtrInput `pulumi:"isRegex"`
	// The token value that needs to be mapped.
	TokenIdentity pulumi.StringInput `pulumi:"tokenIdentity"`
}

func (ApiOidcConfigIdentityMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiOidcConfigIdentityMap)(nil)).Elem()
}

func (i ApiOidcConfigIdentityMapArgs) ToApiOidcConfigIdentityMapOutput() ApiOidcConfigIdentityMapOutput {
	return i.ToApiOidcConfigIdentityMapOutputWithContext(context.Background())
}

func (i ApiOidcConfigIdentityMapArgs) ToApiOidcConfigIdentityMapOutputWithContext(ctx context.Context) ApiOidcConfigIdentityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiOidcConfigIdentityMapOutput)
}

// ApiOidcConfigIdentityMapArrayInput is an input type that accepts ApiOidcConfigIdentityMapArray and ApiOidcConfigIdentityMapArrayOutput values.
// You can construct a concrete instance of `ApiOidcConfigIdentityMapArrayInput` via:
//
//	ApiOidcConfigIdentityMapArray{ ApiOidcConfigIdentityMapArgs{...} }
type ApiOidcConfigIdentityMapArrayInput interface {
	pulumi.Input

	ToApiOidcConfigIdentityMapArrayOutput() ApiOidcConfigIdentityMapArrayOutput
	ToApiOidcConfigIdentityMapArrayOutputWithContext(context.Context) ApiOidcConfigIdentityMapArrayOutput
}

type ApiOidcConfigIdentityMapArray []ApiOidcConfigIdentityMapInput

func (ApiOidcConfigIdentityMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiOidcConfigIdentityMap)(nil)).Elem()
}

func (i ApiOidcConfigIdentityMapArray) ToApiOidcConfigIdentityMapArrayOutput() ApiOidcConfigIdentityMapArrayOutput {
	return i.ToApiOidcConfigIdentityMapArrayOutputWithContext(context.Background())
}

func (i ApiOidcConfigIdentityMapArray) ToApiOidcConfigIdentityMapArrayOutputWithContext(ctx context.Context) ApiOidcConfigIdentityMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiOidcConfigIdentityMapArrayOutput)
}

type ApiOidcConfigIdentityMapOutput struct{ *pulumi.OutputState }

func (ApiOidcConfigIdentityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiOidcConfigIdentityMap)(nil)).Elem()
}

func (o ApiOidcConfigIdentityMapOutput) ToApiOidcConfigIdentityMapOutput() ApiOidcConfigIdentityMapOutput {
	return o
}

func (o ApiOidcConfigIdentityMapOutput) ToApiOidcConfigIdentityMapOutputWithContext(ctx context.Context) ApiOidcConfigIdentityMapOutput {
	return o
}

// The username (email or service account id) of the CC user that the token should map to.
func (o ApiOidcConfigIdentityMapOutput) CcIdentity() pulumi.StringOutput {
	return o.ApplyT(func(v ApiOidcConfigIdentityMap) string { return v.CcIdentity }).(pulumi.StringOutput)
}

// Indicates that the tokenPrincipal field is a regex value.
func (o ApiOidcConfigIdentityMapOutput) IsRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApiOidcConfigIdentityMap) *bool { return v.IsRegex }).(pulumi.BoolPtrOutput)
}

// The token value that needs to be mapped.
func (o ApiOidcConfigIdentityMapOutput) TokenIdentity() pulumi.StringOutput {
	return o.ApplyT(func(v ApiOidcConfigIdentityMap) string { return v.TokenIdentity }).(pulumi.StringOutput)
}

type ApiOidcConfigIdentityMapArrayOutput struct{ *pulumi.OutputState }

func (ApiOidcConfigIdentityMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiOidcConfigIdentityMap)(nil)).Elem()
}

func (o ApiOidcConfigIdentityMapArrayOutput) ToApiOidcConfigIdentityMapArrayOutput() ApiOidcConfigIdentityMapArrayOutput {
	return o
}

func (o ApiOidcConfigIdentityMapArrayOutput) ToApiOidcConfigIdentityMapArrayOutputWithContext(ctx context.Context) ApiOidcConfigIdentityMapArrayOutput {
	return o
}

func (o ApiOidcConfigIdentityMapArrayOutput) Index(i pulumi.IntInput) ApiOidcConfigIdentityMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiOidcConfigIdentityMap {
		return vs[0].([]ApiOidcConfigIdentityMap)[vs[1].(int)]
	}).(ApiOidcConfigIdentityMapOutput)
}

type ClusterDedicated struct {
	// Number of disk I/O operations per second that are permitted on each node in the cluster. Zero indicates the cloud provider-specific default.
	DiskIops *int `pulumi:"diskIops"`
	// Machine type identifier within the given cloud provider, e.g., m6.xlarge, n2-standard-4.
	MachineType *string `pulumi:"machineType"`
	// Memory per node in GiB.
	MemoryGib *float64 `pulumi:"memoryGib"`
	// Number of virtual CPUs per node in the cluster.
	NumVirtualCpus *int `pulumi:"numVirtualCpus"`
	// Set to true to assign private IP addresses to nodes. Required for CMEK and other advanced networking features.
	PrivateNetworkVisibility *bool `pulumi:"privateNetworkVisibility"`
	// Storage amount per node in GiB.
	StorageGib *int `pulumi:"storageGib"`
}

// ClusterDedicatedInput is an input type that accepts ClusterDedicatedArgs and ClusterDedicatedOutput values.
// You can construct a concrete instance of `ClusterDedicatedInput` via:
//
//	ClusterDedicatedArgs{...}
type ClusterDedicatedInput interface {
	pulumi.Input

	ToClusterDedicatedOutput() ClusterDedicatedOutput
	ToClusterDedicatedOutputWithContext(context.Context) ClusterDedicatedOutput
}

type ClusterDedicatedArgs struct {
	// Number of disk I/O operations per second that are permitted on each node in the cluster. Zero indicates the cloud provider-specific default.
	DiskIops pulumi.IntPtrInput `pulumi:"diskIops"`
	// Machine type identifier within the given cloud provider, e.g., m6.xlarge, n2-standard-4.
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
	// Memory per node in GiB.
	MemoryGib pulumi.Float64PtrInput `pulumi:"memoryGib"`
	// Number of virtual CPUs per node in the cluster.
	NumVirtualCpus pulumi.IntPtrInput `pulumi:"numVirtualCpus"`
	// Set to true to assign private IP addresses to nodes. Required for CMEK and other advanced networking features.
	PrivateNetworkVisibility pulumi.BoolPtrInput `pulumi:"privateNetworkVisibility"`
	// Storage amount per node in GiB.
	StorageGib pulumi.IntPtrInput `pulumi:"storageGib"`
}

func (ClusterDedicatedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterDedicated)(nil)).Elem()
}

func (i ClusterDedicatedArgs) ToClusterDedicatedOutput() ClusterDedicatedOutput {
	return i.ToClusterDedicatedOutputWithContext(context.Background())
}

func (i ClusterDedicatedArgs) ToClusterDedicatedOutputWithContext(ctx context.Context) ClusterDedicatedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDedicatedOutput)
}

func (i ClusterDedicatedArgs) ToClusterDedicatedPtrOutput() ClusterDedicatedPtrOutput {
	return i.ToClusterDedicatedPtrOutputWithContext(context.Background())
}

func (i ClusterDedicatedArgs) ToClusterDedicatedPtrOutputWithContext(ctx context.Context) ClusterDedicatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDedicatedOutput).ToClusterDedicatedPtrOutputWithContext(ctx)
}

// ClusterDedicatedPtrInput is an input type that accepts ClusterDedicatedArgs, ClusterDedicatedPtr and ClusterDedicatedPtrOutput values.
// You can construct a concrete instance of `ClusterDedicatedPtrInput` via:
//
//	        ClusterDedicatedArgs{...}
//
//	or:
//
//	        nil
type ClusterDedicatedPtrInput interface {
	pulumi.Input

	ToClusterDedicatedPtrOutput() ClusterDedicatedPtrOutput
	ToClusterDedicatedPtrOutputWithContext(context.Context) ClusterDedicatedPtrOutput
}

type clusterDedicatedPtrType ClusterDedicatedArgs

func ClusterDedicatedPtr(v *ClusterDedicatedArgs) ClusterDedicatedPtrInput {
	return (*clusterDedicatedPtrType)(v)
}

func (*clusterDedicatedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterDedicated)(nil)).Elem()
}

func (i *clusterDedicatedPtrType) ToClusterDedicatedPtrOutput() ClusterDedicatedPtrOutput {
	return i.ToClusterDedicatedPtrOutputWithContext(context.Background())
}

func (i *clusterDedicatedPtrType) ToClusterDedicatedPtrOutputWithContext(ctx context.Context) ClusterDedicatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDedicatedPtrOutput)
}

type ClusterDedicatedOutput struct{ *pulumi.OutputState }

func (ClusterDedicatedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterDedicated)(nil)).Elem()
}

func (o ClusterDedicatedOutput) ToClusterDedicatedOutput() ClusterDedicatedOutput {
	return o
}

func (o ClusterDedicatedOutput) ToClusterDedicatedOutputWithContext(ctx context.Context) ClusterDedicatedOutput {
	return o
}

func (o ClusterDedicatedOutput) ToClusterDedicatedPtrOutput() ClusterDedicatedPtrOutput {
	return o.ToClusterDedicatedPtrOutputWithContext(context.Background())
}

func (o ClusterDedicatedOutput) ToClusterDedicatedPtrOutputWithContext(ctx context.Context) ClusterDedicatedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterDedicated) *ClusterDedicated {
		return &v
	}).(ClusterDedicatedPtrOutput)
}

// Number of disk I/O operations per second that are permitted on each node in the cluster. Zero indicates the cloud provider-specific default.
func (o ClusterDedicatedOutput) DiskIops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterDedicated) *int { return v.DiskIops }).(pulumi.IntPtrOutput)
}

// Machine type identifier within the given cloud provider, e.g., m6.xlarge, n2-standard-4.
func (o ClusterDedicatedOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterDedicated) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

// Memory per node in GiB.
func (o ClusterDedicatedOutput) MemoryGib() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ClusterDedicated) *float64 { return v.MemoryGib }).(pulumi.Float64PtrOutput)
}

// Number of virtual CPUs per node in the cluster.
func (o ClusterDedicatedOutput) NumVirtualCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterDedicated) *int { return v.NumVirtualCpus }).(pulumi.IntPtrOutput)
}

// Set to true to assign private IP addresses to nodes. Required for CMEK and other advanced networking features.
func (o ClusterDedicatedOutput) PrivateNetworkVisibility() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterDedicated) *bool { return v.PrivateNetworkVisibility }).(pulumi.BoolPtrOutput)
}

// Storage amount per node in GiB.
func (o ClusterDedicatedOutput) StorageGib() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterDedicated) *int { return v.StorageGib }).(pulumi.IntPtrOutput)
}

type ClusterDedicatedPtrOutput struct{ *pulumi.OutputState }

func (ClusterDedicatedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterDedicated)(nil)).Elem()
}

func (o ClusterDedicatedPtrOutput) ToClusterDedicatedPtrOutput() ClusterDedicatedPtrOutput {
	return o
}

func (o ClusterDedicatedPtrOutput) ToClusterDedicatedPtrOutputWithContext(ctx context.Context) ClusterDedicatedPtrOutput {
	return o
}

func (o ClusterDedicatedPtrOutput) Elem() ClusterDedicatedOutput {
	return o.ApplyT(func(v *ClusterDedicated) ClusterDedicated {
		if v != nil {
			return *v
		}
		var ret ClusterDedicated
		return ret
	}).(ClusterDedicatedOutput)
}

// Number of disk I/O operations per second that are permitted on each node in the cluster. Zero indicates the cloud provider-specific default.
func (o ClusterDedicatedPtrOutput) DiskIops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterDedicated) *int {
		if v == nil {
			return nil
		}
		return v.DiskIops
	}).(pulumi.IntPtrOutput)
}

// Machine type identifier within the given cloud provider, e.g., m6.xlarge, n2-standard-4.
func (o ClusterDedicatedPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterDedicated) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// Memory per node in GiB.
func (o ClusterDedicatedPtrOutput) MemoryGib() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ClusterDedicated) *float64 {
		if v == nil {
			return nil
		}
		return v.MemoryGib
	}).(pulumi.Float64PtrOutput)
}

// Number of virtual CPUs per node in the cluster.
func (o ClusterDedicatedPtrOutput) NumVirtualCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterDedicated) *int {
		if v == nil {
			return nil
		}
		return v.NumVirtualCpus
	}).(pulumi.IntPtrOutput)
}

// Set to true to assign private IP addresses to nodes. Required for CMEK and other advanced networking features.
func (o ClusterDedicatedPtrOutput) PrivateNetworkVisibility() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterDedicated) *bool {
		if v == nil {
			return nil
		}
		return v.PrivateNetworkVisibility
	}).(pulumi.BoolPtrOutput)
}

// Storage amount per node in GiB.
func (o ClusterDedicatedPtrOutput) StorageGib() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterDedicated) *int {
		if v == nil {
			return nil
		}
		return v.StorageGib
	}).(pulumi.IntPtrOutput)
}

type ClusterRegion struct {
	// Internal DNS name of the cluster within the cloud provider's network. Used to connect to the cluster with PrivateLink or VPC peering.
	InternalDns *string `pulumi:"internalDns"`
	// Name of the region. Should match the region code used by the cluster's cloud provider.
	Name string `pulumi:"name"`
	// Number of nodes in the region. Will always be 0 for serverless clusters.
	NodeCount *int `pulumi:"nodeCount"`
	// Set to true to mark this region as the primary for a Serverless cluster. Exactly one region must be primary. Dedicated clusters expect to have no primary region.
	Primary *bool `pulumi:"primary"`
	// DNS name of the cluster's SQL interface. Used to connect to the cluster with IP allowlisting.
	SqlDns *string `pulumi:"sqlDns"`
	// DNS name used when connecting to the DB Console for the cluster.
	UiDns *string `pulumi:"uiDns"`
}

// ClusterRegionInput is an input type that accepts ClusterRegionArgs and ClusterRegionOutput values.
// You can construct a concrete instance of `ClusterRegionInput` via:
//
//	ClusterRegionArgs{...}
type ClusterRegionInput interface {
	pulumi.Input

	ToClusterRegionOutput() ClusterRegionOutput
	ToClusterRegionOutputWithContext(context.Context) ClusterRegionOutput
}

type ClusterRegionArgs struct {
	// Internal DNS name of the cluster within the cloud provider's network. Used to connect to the cluster with PrivateLink or VPC peering.
	InternalDns pulumi.StringPtrInput `pulumi:"internalDns"`
	// Name of the region. Should match the region code used by the cluster's cloud provider.
	Name pulumi.StringInput `pulumi:"name"`
	// Number of nodes in the region. Will always be 0 for serverless clusters.
	NodeCount pulumi.IntPtrInput `pulumi:"nodeCount"`
	// Set to true to mark this region as the primary for a Serverless cluster. Exactly one region must be primary. Dedicated clusters expect to have no primary region.
	Primary pulumi.BoolPtrInput `pulumi:"primary"`
	// DNS name of the cluster's SQL interface. Used to connect to the cluster with IP allowlisting.
	SqlDns pulumi.StringPtrInput `pulumi:"sqlDns"`
	// DNS name used when connecting to the DB Console for the cluster.
	UiDns pulumi.StringPtrInput `pulumi:"uiDns"`
}

func (ClusterRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRegion)(nil)).Elem()
}

func (i ClusterRegionArgs) ToClusterRegionOutput() ClusterRegionOutput {
	return i.ToClusterRegionOutputWithContext(context.Background())
}

func (i ClusterRegionArgs) ToClusterRegionOutputWithContext(ctx context.Context) ClusterRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRegionOutput)
}

// ClusterRegionArrayInput is an input type that accepts ClusterRegionArray and ClusterRegionArrayOutput values.
// You can construct a concrete instance of `ClusterRegionArrayInput` via:
//
//	ClusterRegionArray{ ClusterRegionArgs{...} }
type ClusterRegionArrayInput interface {
	pulumi.Input

	ToClusterRegionArrayOutput() ClusterRegionArrayOutput
	ToClusterRegionArrayOutputWithContext(context.Context) ClusterRegionArrayOutput
}

type ClusterRegionArray []ClusterRegionInput

func (ClusterRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterRegion)(nil)).Elem()
}

func (i ClusterRegionArray) ToClusterRegionArrayOutput() ClusterRegionArrayOutput {
	return i.ToClusterRegionArrayOutputWithContext(context.Background())
}

func (i ClusterRegionArray) ToClusterRegionArrayOutputWithContext(ctx context.Context) ClusterRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRegionArrayOutput)
}

type ClusterRegionOutput struct{ *pulumi.OutputState }

func (ClusterRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRegion)(nil)).Elem()
}

func (o ClusterRegionOutput) ToClusterRegionOutput() ClusterRegionOutput {
	return o
}

func (o ClusterRegionOutput) ToClusterRegionOutputWithContext(ctx context.Context) ClusterRegionOutput {
	return o
}

// Internal DNS name of the cluster within the cloud provider's network. Used to connect to the cluster with PrivateLink or VPC peering.
func (o ClusterRegionOutput) InternalDns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterRegion) *string { return v.InternalDns }).(pulumi.StringPtrOutput)
}

// Name of the region. Should match the region code used by the cluster's cloud provider.
func (o ClusterRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterRegion) string { return v.Name }).(pulumi.StringOutput)
}

// Number of nodes in the region. Will always be 0 for serverless clusters.
func (o ClusterRegionOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterRegion) *int { return v.NodeCount }).(pulumi.IntPtrOutput)
}

// Set to true to mark this region as the primary for a Serverless cluster. Exactly one region must be primary. Dedicated clusters expect to have no primary region.
func (o ClusterRegionOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterRegion) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

// DNS name of the cluster's SQL interface. Used to connect to the cluster with IP allowlisting.
func (o ClusterRegionOutput) SqlDns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterRegion) *string { return v.SqlDns }).(pulumi.StringPtrOutput)
}

// DNS name used when connecting to the DB Console for the cluster.
func (o ClusterRegionOutput) UiDns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterRegion) *string { return v.UiDns }).(pulumi.StringPtrOutput)
}

type ClusterRegionArrayOutput struct{ *pulumi.OutputState }

func (ClusterRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterRegion)(nil)).Elem()
}

func (o ClusterRegionArrayOutput) ToClusterRegionArrayOutput() ClusterRegionArrayOutput {
	return o
}

func (o ClusterRegionArrayOutput) ToClusterRegionArrayOutputWithContext(ctx context.Context) ClusterRegionArrayOutput {
	return o
}

func (o ClusterRegionArrayOutput) Index(i pulumi.IntInput) ClusterRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterRegion {
		return vs[0].([]ClusterRegion)[vs[1].(int)]
	}).(ClusterRegionOutput)
}

type ClusterServerless struct {
	// Cluster identifier in a connection string.
	RoutingId *string `pulumi:"routingId"`
	// Spend limit in US cents.
	SpendLimit  *int                          `pulumi:"spendLimit"`
	UsageLimits *ClusterServerlessUsageLimits `pulumi:"usageLimits"`
}

// ClusterServerlessInput is an input type that accepts ClusterServerlessArgs and ClusterServerlessOutput values.
// You can construct a concrete instance of `ClusterServerlessInput` via:
//
//	ClusterServerlessArgs{...}
type ClusterServerlessInput interface {
	pulumi.Input

	ToClusterServerlessOutput() ClusterServerlessOutput
	ToClusterServerlessOutputWithContext(context.Context) ClusterServerlessOutput
}

type ClusterServerlessArgs struct {
	// Cluster identifier in a connection string.
	RoutingId pulumi.StringPtrInput `pulumi:"routingId"`
	// Spend limit in US cents.
	SpendLimit  pulumi.IntPtrInput                   `pulumi:"spendLimit"`
	UsageLimits ClusterServerlessUsageLimitsPtrInput `pulumi:"usageLimits"`
}

func (ClusterServerlessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServerless)(nil)).Elem()
}

func (i ClusterServerlessArgs) ToClusterServerlessOutput() ClusterServerlessOutput {
	return i.ToClusterServerlessOutputWithContext(context.Background())
}

func (i ClusterServerlessArgs) ToClusterServerlessOutputWithContext(ctx context.Context) ClusterServerlessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServerlessOutput)
}

func (i ClusterServerlessArgs) ToClusterServerlessPtrOutput() ClusterServerlessPtrOutput {
	return i.ToClusterServerlessPtrOutputWithContext(context.Background())
}

func (i ClusterServerlessArgs) ToClusterServerlessPtrOutputWithContext(ctx context.Context) ClusterServerlessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServerlessOutput).ToClusterServerlessPtrOutputWithContext(ctx)
}

// ClusterServerlessPtrInput is an input type that accepts ClusterServerlessArgs, ClusterServerlessPtr and ClusterServerlessPtrOutput values.
// You can construct a concrete instance of `ClusterServerlessPtrInput` via:
//
//	        ClusterServerlessArgs{...}
//
//	or:
//
//	        nil
type ClusterServerlessPtrInput interface {
	pulumi.Input

	ToClusterServerlessPtrOutput() ClusterServerlessPtrOutput
	ToClusterServerlessPtrOutputWithContext(context.Context) ClusterServerlessPtrOutput
}

type clusterServerlessPtrType ClusterServerlessArgs

func ClusterServerlessPtr(v *ClusterServerlessArgs) ClusterServerlessPtrInput {
	return (*clusterServerlessPtrType)(v)
}

func (*clusterServerlessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterServerless)(nil)).Elem()
}

func (i *clusterServerlessPtrType) ToClusterServerlessPtrOutput() ClusterServerlessPtrOutput {
	return i.ToClusterServerlessPtrOutputWithContext(context.Background())
}

func (i *clusterServerlessPtrType) ToClusterServerlessPtrOutputWithContext(ctx context.Context) ClusterServerlessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServerlessPtrOutput)
}

type ClusterServerlessOutput struct{ *pulumi.OutputState }

func (ClusterServerlessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServerless)(nil)).Elem()
}

func (o ClusterServerlessOutput) ToClusterServerlessOutput() ClusterServerlessOutput {
	return o
}

func (o ClusterServerlessOutput) ToClusterServerlessOutputWithContext(ctx context.Context) ClusterServerlessOutput {
	return o
}

func (o ClusterServerlessOutput) ToClusterServerlessPtrOutput() ClusterServerlessPtrOutput {
	return o.ToClusterServerlessPtrOutputWithContext(context.Background())
}

func (o ClusterServerlessOutput) ToClusterServerlessPtrOutputWithContext(ctx context.Context) ClusterServerlessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterServerless) *ClusterServerless {
		return &v
	}).(ClusterServerlessPtrOutput)
}

// Cluster identifier in a connection string.
func (o ClusterServerlessOutput) RoutingId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterServerless) *string { return v.RoutingId }).(pulumi.StringPtrOutput)
}

// Spend limit in US cents.
func (o ClusterServerlessOutput) SpendLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterServerless) *int { return v.SpendLimit }).(pulumi.IntPtrOutput)
}

func (o ClusterServerlessOutput) UsageLimits() ClusterServerlessUsageLimitsPtrOutput {
	return o.ApplyT(func(v ClusterServerless) *ClusterServerlessUsageLimits { return v.UsageLimits }).(ClusterServerlessUsageLimitsPtrOutput)
}

type ClusterServerlessPtrOutput struct{ *pulumi.OutputState }

func (ClusterServerlessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterServerless)(nil)).Elem()
}

func (o ClusterServerlessPtrOutput) ToClusterServerlessPtrOutput() ClusterServerlessPtrOutput {
	return o
}

func (o ClusterServerlessPtrOutput) ToClusterServerlessPtrOutputWithContext(ctx context.Context) ClusterServerlessPtrOutput {
	return o
}

func (o ClusterServerlessPtrOutput) Elem() ClusterServerlessOutput {
	return o.ApplyT(func(v *ClusterServerless) ClusterServerless {
		if v != nil {
			return *v
		}
		var ret ClusterServerless
		return ret
	}).(ClusterServerlessOutput)
}

// Cluster identifier in a connection string.
func (o ClusterServerlessPtrOutput) RoutingId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterServerless) *string {
		if v == nil {
			return nil
		}
		return v.RoutingId
	}).(pulumi.StringPtrOutput)
}

// Spend limit in US cents.
func (o ClusterServerlessPtrOutput) SpendLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterServerless) *int {
		if v == nil {
			return nil
		}
		return v.SpendLimit
	}).(pulumi.IntPtrOutput)
}

func (o ClusterServerlessPtrOutput) UsageLimits() ClusterServerlessUsageLimitsPtrOutput {
	return o.ApplyT(func(v *ClusterServerless) *ClusterServerlessUsageLimits {
		if v == nil {
			return nil
		}
		return v.UsageLimits
	}).(ClusterServerlessUsageLimitsPtrOutput)
}

type ClusterServerlessUsageLimits struct {
	// Maximum number of Request Units that the cluster can consume during the month.
	RequestUnitLimit int `pulumi:"requestUnitLimit"`
	// Maximum amount of storage (in MiB) that the cluster can have at any time during the month.
	StorageMibLimit int `pulumi:"storageMibLimit"`
}

// ClusterServerlessUsageLimitsInput is an input type that accepts ClusterServerlessUsageLimitsArgs and ClusterServerlessUsageLimitsOutput values.
// You can construct a concrete instance of `ClusterServerlessUsageLimitsInput` via:
//
//	ClusterServerlessUsageLimitsArgs{...}
type ClusterServerlessUsageLimitsInput interface {
	pulumi.Input

	ToClusterServerlessUsageLimitsOutput() ClusterServerlessUsageLimitsOutput
	ToClusterServerlessUsageLimitsOutputWithContext(context.Context) ClusterServerlessUsageLimitsOutput
}

type ClusterServerlessUsageLimitsArgs struct {
	// Maximum number of Request Units that the cluster can consume during the month.
	RequestUnitLimit pulumi.IntInput `pulumi:"requestUnitLimit"`
	// Maximum amount of storage (in MiB) that the cluster can have at any time during the month.
	StorageMibLimit pulumi.IntInput `pulumi:"storageMibLimit"`
}

func (ClusterServerlessUsageLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServerlessUsageLimits)(nil)).Elem()
}

func (i ClusterServerlessUsageLimitsArgs) ToClusterServerlessUsageLimitsOutput() ClusterServerlessUsageLimitsOutput {
	return i.ToClusterServerlessUsageLimitsOutputWithContext(context.Background())
}

func (i ClusterServerlessUsageLimitsArgs) ToClusterServerlessUsageLimitsOutputWithContext(ctx context.Context) ClusterServerlessUsageLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServerlessUsageLimitsOutput)
}

func (i ClusterServerlessUsageLimitsArgs) ToClusterServerlessUsageLimitsPtrOutput() ClusterServerlessUsageLimitsPtrOutput {
	return i.ToClusterServerlessUsageLimitsPtrOutputWithContext(context.Background())
}

func (i ClusterServerlessUsageLimitsArgs) ToClusterServerlessUsageLimitsPtrOutputWithContext(ctx context.Context) ClusterServerlessUsageLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServerlessUsageLimitsOutput).ToClusterServerlessUsageLimitsPtrOutputWithContext(ctx)
}

// ClusterServerlessUsageLimitsPtrInput is an input type that accepts ClusterServerlessUsageLimitsArgs, ClusterServerlessUsageLimitsPtr and ClusterServerlessUsageLimitsPtrOutput values.
// You can construct a concrete instance of `ClusterServerlessUsageLimitsPtrInput` via:
//
//	        ClusterServerlessUsageLimitsArgs{...}
//
//	or:
//
//	        nil
type ClusterServerlessUsageLimitsPtrInput interface {
	pulumi.Input

	ToClusterServerlessUsageLimitsPtrOutput() ClusterServerlessUsageLimitsPtrOutput
	ToClusterServerlessUsageLimitsPtrOutputWithContext(context.Context) ClusterServerlessUsageLimitsPtrOutput
}

type clusterServerlessUsageLimitsPtrType ClusterServerlessUsageLimitsArgs

func ClusterServerlessUsageLimitsPtr(v *ClusterServerlessUsageLimitsArgs) ClusterServerlessUsageLimitsPtrInput {
	return (*clusterServerlessUsageLimitsPtrType)(v)
}

func (*clusterServerlessUsageLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterServerlessUsageLimits)(nil)).Elem()
}

func (i *clusterServerlessUsageLimitsPtrType) ToClusterServerlessUsageLimitsPtrOutput() ClusterServerlessUsageLimitsPtrOutput {
	return i.ToClusterServerlessUsageLimitsPtrOutputWithContext(context.Background())
}

func (i *clusterServerlessUsageLimitsPtrType) ToClusterServerlessUsageLimitsPtrOutputWithContext(ctx context.Context) ClusterServerlessUsageLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServerlessUsageLimitsPtrOutput)
}

type ClusterServerlessUsageLimitsOutput struct{ *pulumi.OutputState }

func (ClusterServerlessUsageLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServerlessUsageLimits)(nil)).Elem()
}

func (o ClusterServerlessUsageLimitsOutput) ToClusterServerlessUsageLimitsOutput() ClusterServerlessUsageLimitsOutput {
	return o
}

func (o ClusterServerlessUsageLimitsOutput) ToClusterServerlessUsageLimitsOutputWithContext(ctx context.Context) ClusterServerlessUsageLimitsOutput {
	return o
}

func (o ClusterServerlessUsageLimitsOutput) ToClusterServerlessUsageLimitsPtrOutput() ClusterServerlessUsageLimitsPtrOutput {
	return o.ToClusterServerlessUsageLimitsPtrOutputWithContext(context.Background())
}

func (o ClusterServerlessUsageLimitsOutput) ToClusterServerlessUsageLimitsPtrOutputWithContext(ctx context.Context) ClusterServerlessUsageLimitsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterServerlessUsageLimits) *ClusterServerlessUsageLimits {
		return &v
	}).(ClusterServerlessUsageLimitsPtrOutput)
}

// Maximum number of Request Units that the cluster can consume during the month.
func (o ClusterServerlessUsageLimitsOutput) RequestUnitLimit() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterServerlessUsageLimits) int { return v.RequestUnitLimit }).(pulumi.IntOutput)
}

// Maximum amount of storage (in MiB) that the cluster can have at any time during the month.
func (o ClusterServerlessUsageLimitsOutput) StorageMibLimit() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterServerlessUsageLimits) int { return v.StorageMibLimit }).(pulumi.IntOutput)
}

type ClusterServerlessUsageLimitsPtrOutput struct{ *pulumi.OutputState }

func (ClusterServerlessUsageLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterServerlessUsageLimits)(nil)).Elem()
}

func (o ClusterServerlessUsageLimitsPtrOutput) ToClusterServerlessUsageLimitsPtrOutput() ClusterServerlessUsageLimitsPtrOutput {
	return o
}

func (o ClusterServerlessUsageLimitsPtrOutput) ToClusterServerlessUsageLimitsPtrOutputWithContext(ctx context.Context) ClusterServerlessUsageLimitsPtrOutput {
	return o
}

func (o ClusterServerlessUsageLimitsPtrOutput) Elem() ClusterServerlessUsageLimitsOutput {
	return o.ApplyT(func(v *ClusterServerlessUsageLimits) ClusterServerlessUsageLimits {
		if v != nil {
			return *v
		}
		var ret ClusterServerlessUsageLimits
		return ret
	}).(ClusterServerlessUsageLimitsOutput)
}

// Maximum number of Request Units that the cluster can consume during the month.
func (o ClusterServerlessUsageLimitsPtrOutput) RequestUnitLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterServerlessUsageLimits) *int {
		if v == nil {
			return nil
		}
		return &v.RequestUnitLimit
	}).(pulumi.IntPtrOutput)
}

// Maximum amount of storage (in MiB) that the cluster can have at any time during the month.
func (o ClusterServerlessUsageLimitsPtrOutput) StorageMibLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterServerlessUsageLimits) *int {
		if v == nil {
			return nil
		}
		return &v.StorageMibLimit
	}).(pulumi.IntPtrOutput)
}

type CmekAdditionalRegion struct {
	// Internal DNS name of the cluster within the cloud provider's network. Used to connect to the cluster with PrivateLink or VPC peering.
	InternalDns *string `pulumi:"internalDns"`
	// Name of the region. Should match the region code used by the cluster's cloud provider.
	Name string `pulumi:"name"`
	// Number of nodes in the region. Will always be 0 for serverless clusters.
	NodeCount *int `pulumi:"nodeCount"`
	// Set to true to mark this region as the primary for a Serverless cluster. Exactly one region must be primary. Dedicated clusters expect to have no primary region.
	Primary *bool `pulumi:"primary"`
	// DNS name of the cluster's SQL interface. Used to connect to the cluster with IP allowlisting.
	SqlDns *string `pulumi:"sqlDns"`
	// DNS name used when connecting to the DB Console for the cluster.
	UiDns *string `pulumi:"uiDns"`
}

// CmekAdditionalRegionInput is an input type that accepts CmekAdditionalRegionArgs and CmekAdditionalRegionOutput values.
// You can construct a concrete instance of `CmekAdditionalRegionInput` via:
//
//	CmekAdditionalRegionArgs{...}
type CmekAdditionalRegionInput interface {
	pulumi.Input

	ToCmekAdditionalRegionOutput() CmekAdditionalRegionOutput
	ToCmekAdditionalRegionOutputWithContext(context.Context) CmekAdditionalRegionOutput
}

type CmekAdditionalRegionArgs struct {
	// Internal DNS name of the cluster within the cloud provider's network. Used to connect to the cluster with PrivateLink or VPC peering.
	InternalDns pulumi.StringPtrInput `pulumi:"internalDns"`
	// Name of the region. Should match the region code used by the cluster's cloud provider.
	Name pulumi.StringInput `pulumi:"name"`
	// Number of nodes in the region. Will always be 0 for serverless clusters.
	NodeCount pulumi.IntPtrInput `pulumi:"nodeCount"`
	// Set to true to mark this region as the primary for a Serverless cluster. Exactly one region must be primary. Dedicated clusters expect to have no primary region.
	Primary pulumi.BoolPtrInput `pulumi:"primary"`
	// DNS name of the cluster's SQL interface. Used to connect to the cluster with IP allowlisting.
	SqlDns pulumi.StringPtrInput `pulumi:"sqlDns"`
	// DNS name used when connecting to the DB Console for the cluster.
	UiDns pulumi.StringPtrInput `pulumi:"uiDns"`
}

func (CmekAdditionalRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CmekAdditionalRegion)(nil)).Elem()
}

func (i CmekAdditionalRegionArgs) ToCmekAdditionalRegionOutput() CmekAdditionalRegionOutput {
	return i.ToCmekAdditionalRegionOutputWithContext(context.Background())
}

func (i CmekAdditionalRegionArgs) ToCmekAdditionalRegionOutputWithContext(ctx context.Context) CmekAdditionalRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmekAdditionalRegionOutput)
}

// CmekAdditionalRegionArrayInput is an input type that accepts CmekAdditionalRegionArray and CmekAdditionalRegionArrayOutput values.
// You can construct a concrete instance of `CmekAdditionalRegionArrayInput` via:
//
//	CmekAdditionalRegionArray{ CmekAdditionalRegionArgs{...} }
type CmekAdditionalRegionArrayInput interface {
	pulumi.Input

	ToCmekAdditionalRegionArrayOutput() CmekAdditionalRegionArrayOutput
	ToCmekAdditionalRegionArrayOutputWithContext(context.Context) CmekAdditionalRegionArrayOutput
}

type CmekAdditionalRegionArray []CmekAdditionalRegionInput

func (CmekAdditionalRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CmekAdditionalRegion)(nil)).Elem()
}

func (i CmekAdditionalRegionArray) ToCmekAdditionalRegionArrayOutput() CmekAdditionalRegionArrayOutput {
	return i.ToCmekAdditionalRegionArrayOutputWithContext(context.Background())
}

func (i CmekAdditionalRegionArray) ToCmekAdditionalRegionArrayOutputWithContext(ctx context.Context) CmekAdditionalRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmekAdditionalRegionArrayOutput)
}

type CmekAdditionalRegionOutput struct{ *pulumi.OutputState }

func (CmekAdditionalRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CmekAdditionalRegion)(nil)).Elem()
}

func (o CmekAdditionalRegionOutput) ToCmekAdditionalRegionOutput() CmekAdditionalRegionOutput {
	return o
}

func (o CmekAdditionalRegionOutput) ToCmekAdditionalRegionOutputWithContext(ctx context.Context) CmekAdditionalRegionOutput {
	return o
}

// Internal DNS name of the cluster within the cloud provider's network. Used to connect to the cluster with PrivateLink or VPC peering.
func (o CmekAdditionalRegionOutput) InternalDns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CmekAdditionalRegion) *string { return v.InternalDns }).(pulumi.StringPtrOutput)
}

// Name of the region. Should match the region code used by the cluster's cloud provider.
func (o CmekAdditionalRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CmekAdditionalRegion) string { return v.Name }).(pulumi.StringOutput)
}

// Number of nodes in the region. Will always be 0 for serverless clusters.
func (o CmekAdditionalRegionOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CmekAdditionalRegion) *int { return v.NodeCount }).(pulumi.IntPtrOutput)
}

// Set to true to mark this region as the primary for a Serverless cluster. Exactly one region must be primary. Dedicated clusters expect to have no primary region.
func (o CmekAdditionalRegionOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CmekAdditionalRegion) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

// DNS name of the cluster's SQL interface. Used to connect to the cluster with IP allowlisting.
func (o CmekAdditionalRegionOutput) SqlDns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CmekAdditionalRegion) *string { return v.SqlDns }).(pulumi.StringPtrOutput)
}

// DNS name used when connecting to the DB Console for the cluster.
func (o CmekAdditionalRegionOutput) UiDns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CmekAdditionalRegion) *string { return v.UiDns }).(pulumi.StringPtrOutput)
}

type CmekAdditionalRegionArrayOutput struct{ *pulumi.OutputState }

func (CmekAdditionalRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CmekAdditionalRegion)(nil)).Elem()
}

func (o CmekAdditionalRegionArrayOutput) ToCmekAdditionalRegionArrayOutput() CmekAdditionalRegionArrayOutput {
	return o
}

func (o CmekAdditionalRegionArrayOutput) ToCmekAdditionalRegionArrayOutputWithContext(ctx context.Context) CmekAdditionalRegionArrayOutput {
	return o
}

func (o CmekAdditionalRegionArrayOutput) Index(i pulumi.IntInput) CmekAdditionalRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CmekAdditionalRegion {
		return vs[0].([]CmekAdditionalRegion)[vs[1].(int)]
	}).(CmekAdditionalRegionOutput)
}

type CmekRegion struct {
	Key CmekRegionKey `pulumi:"key"`
	// Cloud provider region code.
	Region string `pulumi:"region"`
	// Describes the status of the current encryption key within the region.
	Status *string `pulumi:"status"`
}

// CmekRegionInput is an input type that accepts CmekRegionArgs and CmekRegionOutput values.
// You can construct a concrete instance of `CmekRegionInput` via:
//
//	CmekRegionArgs{...}
type CmekRegionInput interface {
	pulumi.Input

	ToCmekRegionOutput() CmekRegionOutput
	ToCmekRegionOutputWithContext(context.Context) CmekRegionOutput
}

type CmekRegionArgs struct {
	Key CmekRegionKeyInput `pulumi:"key"`
	// Cloud provider region code.
	Region pulumi.StringInput `pulumi:"region"`
	// Describes the status of the current encryption key within the region.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (CmekRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CmekRegion)(nil)).Elem()
}

func (i CmekRegionArgs) ToCmekRegionOutput() CmekRegionOutput {
	return i.ToCmekRegionOutputWithContext(context.Background())
}

func (i CmekRegionArgs) ToCmekRegionOutputWithContext(ctx context.Context) CmekRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmekRegionOutput)
}

// CmekRegionArrayInput is an input type that accepts CmekRegionArray and CmekRegionArrayOutput values.
// You can construct a concrete instance of `CmekRegionArrayInput` via:
//
//	CmekRegionArray{ CmekRegionArgs{...} }
type CmekRegionArrayInput interface {
	pulumi.Input

	ToCmekRegionArrayOutput() CmekRegionArrayOutput
	ToCmekRegionArrayOutputWithContext(context.Context) CmekRegionArrayOutput
}

type CmekRegionArray []CmekRegionInput

func (CmekRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CmekRegion)(nil)).Elem()
}

func (i CmekRegionArray) ToCmekRegionArrayOutput() CmekRegionArrayOutput {
	return i.ToCmekRegionArrayOutputWithContext(context.Background())
}

func (i CmekRegionArray) ToCmekRegionArrayOutputWithContext(ctx context.Context) CmekRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmekRegionArrayOutput)
}

type CmekRegionOutput struct{ *pulumi.OutputState }

func (CmekRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CmekRegion)(nil)).Elem()
}

func (o CmekRegionOutput) ToCmekRegionOutput() CmekRegionOutput {
	return o
}

func (o CmekRegionOutput) ToCmekRegionOutputWithContext(ctx context.Context) CmekRegionOutput {
	return o
}

func (o CmekRegionOutput) Key() CmekRegionKeyOutput {
	return o.ApplyT(func(v CmekRegion) CmekRegionKey { return v.Key }).(CmekRegionKeyOutput)
}

// Cloud provider region code.
func (o CmekRegionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v CmekRegion) string { return v.Region }).(pulumi.StringOutput)
}

// Describes the status of the current encryption key within the region.
func (o CmekRegionOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CmekRegion) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type CmekRegionArrayOutput struct{ *pulumi.OutputState }

func (CmekRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CmekRegion)(nil)).Elem()
}

func (o CmekRegionArrayOutput) ToCmekRegionArrayOutput() CmekRegionArrayOutput {
	return o
}

func (o CmekRegionArrayOutput) ToCmekRegionArrayOutputWithContext(ctx context.Context) CmekRegionArrayOutput {
	return o
}

func (o CmekRegionArrayOutput) Index(i pulumi.IntInput) CmekRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CmekRegion {
		return vs[0].([]CmekRegion)[vs[1].(int)]
	}).(CmekRegionOutput)
}

type CmekRegionKey struct {
	// Principal to authenticate as in order to access the key.
	AuthPrincipal string `pulumi:"authPrincipal"`
	// Indicates when the key was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Current status of this key.
	Status *string `pulumi:"status"`
	// Type of encryption key. Current allowed values are:
	//   * AWS_KMS
	//   * GCP_CLOUD_KMS
	//   * NULL_KMS
	Type string `pulumi:"type"`
	// Indicates when the key was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Provider-specific URI pointing to the encryption key.
	Uri string `pulumi:"uri"`
	// Elaborates on the key's status and hints at how to fix issues that may have occurred during asynchronous key operations.
	UserMessage *string `pulumi:"userMessage"`
}

// CmekRegionKeyInput is an input type that accepts CmekRegionKeyArgs and CmekRegionKeyOutput values.
// You can construct a concrete instance of `CmekRegionKeyInput` via:
//
//	CmekRegionKeyArgs{...}
type CmekRegionKeyInput interface {
	pulumi.Input

	ToCmekRegionKeyOutput() CmekRegionKeyOutput
	ToCmekRegionKeyOutputWithContext(context.Context) CmekRegionKeyOutput
}

type CmekRegionKeyArgs struct {
	// Principal to authenticate as in order to access the key.
	AuthPrincipal pulumi.StringInput `pulumi:"authPrincipal"`
	// Indicates when the key was created.
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// Current status of this key.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of encryption key. Current allowed values are:
	//   * AWS_KMS
	//   * GCP_CLOUD_KMS
	//   * NULL_KMS
	Type pulumi.StringInput `pulumi:"type"`
	// Indicates when the key was last updated.
	UpdatedAt pulumi.StringPtrInput `pulumi:"updatedAt"`
	// Provider-specific URI pointing to the encryption key.
	Uri pulumi.StringInput `pulumi:"uri"`
	// Elaborates on the key's status and hints at how to fix issues that may have occurred during asynchronous key operations.
	UserMessage pulumi.StringPtrInput `pulumi:"userMessage"`
}

func (CmekRegionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CmekRegionKey)(nil)).Elem()
}

func (i CmekRegionKeyArgs) ToCmekRegionKeyOutput() CmekRegionKeyOutput {
	return i.ToCmekRegionKeyOutputWithContext(context.Background())
}

func (i CmekRegionKeyArgs) ToCmekRegionKeyOutputWithContext(ctx context.Context) CmekRegionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmekRegionKeyOutput)
}

type CmekRegionKeyOutput struct{ *pulumi.OutputState }

func (CmekRegionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CmekRegionKey)(nil)).Elem()
}

func (o CmekRegionKeyOutput) ToCmekRegionKeyOutput() CmekRegionKeyOutput {
	return o
}

func (o CmekRegionKeyOutput) ToCmekRegionKeyOutputWithContext(ctx context.Context) CmekRegionKeyOutput {
	return o
}

// Principal to authenticate as in order to access the key.
func (o CmekRegionKeyOutput) AuthPrincipal() pulumi.StringOutput {
	return o.ApplyT(func(v CmekRegionKey) string { return v.AuthPrincipal }).(pulumi.StringOutput)
}

// Indicates when the key was created.
func (o CmekRegionKeyOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CmekRegionKey) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// Current status of this key.
func (o CmekRegionKeyOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CmekRegionKey) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of encryption key. Current allowed values are:
//   - AWS_KMS
//   - GCP_CLOUD_KMS
//   - NULL_KMS
func (o CmekRegionKeyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CmekRegionKey) string { return v.Type }).(pulumi.StringOutput)
}

// Indicates when the key was last updated.
func (o CmekRegionKeyOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CmekRegionKey) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

// Provider-specific URI pointing to the encryption key.
func (o CmekRegionKeyOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v CmekRegionKey) string { return v.Uri }).(pulumi.StringOutput)
}

// Elaborates on the key's status and hints at how to fix issues that may have occurred during asynchronous key operations.
func (o CmekRegionKeyOutput) UserMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CmekRegionKey) *string { return v.UserMessage }).(pulumi.StringPtrOutput)
}

type LogExportConfigGroup struct {
	// A list of CockroachDB log channels to include in this group.
	Channels []string `pulumi:"channels"`
	// The name of the group, reflected in the log sink.
	LogName string `pulumi:"logName"`
	// The minimum log level to filter to this log group.
	MinLevel *string `pulumi:"minLevel"`
	// Governs whether this log group should aggregate redacted logs if unset.
	Redact *bool `pulumi:"redact"`
}

// LogExportConfigGroupInput is an input type that accepts LogExportConfigGroupArgs and LogExportConfigGroupOutput values.
// You can construct a concrete instance of `LogExportConfigGroupInput` via:
//
//	LogExportConfigGroupArgs{...}
type LogExportConfigGroupInput interface {
	pulumi.Input

	ToLogExportConfigGroupOutput() LogExportConfigGroupOutput
	ToLogExportConfigGroupOutputWithContext(context.Context) LogExportConfigGroupOutput
}

type LogExportConfigGroupArgs struct {
	// A list of CockroachDB log channels to include in this group.
	Channels pulumi.StringArrayInput `pulumi:"channels"`
	// The name of the group, reflected in the log sink.
	LogName pulumi.StringInput `pulumi:"logName"`
	// The minimum log level to filter to this log group.
	MinLevel pulumi.StringPtrInput `pulumi:"minLevel"`
	// Governs whether this log group should aggregate redacted logs if unset.
	Redact pulumi.BoolPtrInput `pulumi:"redact"`
}

func (LogExportConfigGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogExportConfigGroup)(nil)).Elem()
}

func (i LogExportConfigGroupArgs) ToLogExportConfigGroupOutput() LogExportConfigGroupOutput {
	return i.ToLogExportConfigGroupOutputWithContext(context.Background())
}

func (i LogExportConfigGroupArgs) ToLogExportConfigGroupOutputWithContext(ctx context.Context) LogExportConfigGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogExportConfigGroupOutput)
}

// LogExportConfigGroupArrayInput is an input type that accepts LogExportConfigGroupArray and LogExportConfigGroupArrayOutput values.
// You can construct a concrete instance of `LogExportConfigGroupArrayInput` via:
//
//	LogExportConfigGroupArray{ LogExportConfigGroupArgs{...} }
type LogExportConfigGroupArrayInput interface {
	pulumi.Input

	ToLogExportConfigGroupArrayOutput() LogExportConfigGroupArrayOutput
	ToLogExportConfigGroupArrayOutputWithContext(context.Context) LogExportConfigGroupArrayOutput
}

type LogExportConfigGroupArray []LogExportConfigGroupInput

func (LogExportConfigGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogExportConfigGroup)(nil)).Elem()
}

func (i LogExportConfigGroupArray) ToLogExportConfigGroupArrayOutput() LogExportConfigGroupArrayOutput {
	return i.ToLogExportConfigGroupArrayOutputWithContext(context.Background())
}

func (i LogExportConfigGroupArray) ToLogExportConfigGroupArrayOutputWithContext(ctx context.Context) LogExportConfigGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogExportConfigGroupArrayOutput)
}

type LogExportConfigGroupOutput struct{ *pulumi.OutputState }

func (LogExportConfigGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogExportConfigGroup)(nil)).Elem()
}

func (o LogExportConfigGroupOutput) ToLogExportConfigGroupOutput() LogExportConfigGroupOutput {
	return o
}

func (o LogExportConfigGroupOutput) ToLogExportConfigGroupOutputWithContext(ctx context.Context) LogExportConfigGroupOutput {
	return o
}

// A list of CockroachDB log channels to include in this group.
func (o LogExportConfigGroupOutput) Channels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LogExportConfigGroup) []string { return v.Channels }).(pulumi.StringArrayOutput)
}

// The name of the group, reflected in the log sink.
func (o LogExportConfigGroupOutput) LogName() pulumi.StringOutput {
	return o.ApplyT(func(v LogExportConfigGroup) string { return v.LogName }).(pulumi.StringOutput)
}

// The minimum log level to filter to this log group.
func (o LogExportConfigGroupOutput) MinLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogExportConfigGroup) *string { return v.MinLevel }).(pulumi.StringPtrOutput)
}

// Governs whether this log group should aggregate redacted logs if unset.
func (o LogExportConfigGroupOutput) Redact() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogExportConfigGroup) *bool { return v.Redact }).(pulumi.BoolPtrOutput)
}

type LogExportConfigGroupArrayOutput struct{ *pulumi.OutputState }

func (LogExportConfigGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogExportConfigGroup)(nil)).Elem()
}

func (o LogExportConfigGroupArrayOutput) ToLogExportConfigGroupArrayOutput() LogExportConfigGroupArrayOutput {
	return o
}

func (o LogExportConfigGroupArrayOutput) ToLogExportConfigGroupArrayOutputWithContext(ctx context.Context) LogExportConfigGroupArrayOutput {
	return o
}

func (o LogExportConfigGroupArrayOutput) Index(i pulumi.IntInput) LogExportConfigGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogExportConfigGroup {
		return vs[0].([]LogExportConfigGroup)[vs[1].(int)]
	}).(LogExportConfigGroupOutput)
}

type PrivateEndpointServicesService struct {
	Aws *PrivateEndpointServicesServiceAws `pulumi:"aws"`
	// Cloud provider associated with this service.
	CloudProvider *string `pulumi:"cloudProvider"`
	// Cloud provider region code associated with this service.
	RegionName *string `pulumi:"regionName"`
	// Operation status of the service.
	Status *string `pulumi:"status"`
}

// PrivateEndpointServicesServiceInput is an input type that accepts PrivateEndpointServicesServiceArgs and PrivateEndpointServicesServiceOutput values.
// You can construct a concrete instance of `PrivateEndpointServicesServiceInput` via:
//
//	PrivateEndpointServicesServiceArgs{...}
type PrivateEndpointServicesServiceInput interface {
	pulumi.Input

	ToPrivateEndpointServicesServiceOutput() PrivateEndpointServicesServiceOutput
	ToPrivateEndpointServicesServiceOutputWithContext(context.Context) PrivateEndpointServicesServiceOutput
}

type PrivateEndpointServicesServiceArgs struct {
	Aws PrivateEndpointServicesServiceAwsPtrInput `pulumi:"aws"`
	// Cloud provider associated with this service.
	CloudProvider pulumi.StringPtrInput `pulumi:"cloudProvider"`
	// Cloud provider region code associated with this service.
	RegionName pulumi.StringPtrInput `pulumi:"regionName"`
	// Operation status of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateEndpointServicesServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointServicesService)(nil)).Elem()
}

func (i PrivateEndpointServicesServiceArgs) ToPrivateEndpointServicesServiceOutput() PrivateEndpointServicesServiceOutput {
	return i.ToPrivateEndpointServicesServiceOutputWithContext(context.Background())
}

func (i PrivateEndpointServicesServiceArgs) ToPrivateEndpointServicesServiceOutputWithContext(ctx context.Context) PrivateEndpointServicesServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointServicesServiceOutput)
}

// PrivateEndpointServicesServiceArrayInput is an input type that accepts PrivateEndpointServicesServiceArray and PrivateEndpointServicesServiceArrayOutput values.
// You can construct a concrete instance of `PrivateEndpointServicesServiceArrayInput` via:
//
//	PrivateEndpointServicesServiceArray{ PrivateEndpointServicesServiceArgs{...} }
type PrivateEndpointServicesServiceArrayInput interface {
	pulumi.Input

	ToPrivateEndpointServicesServiceArrayOutput() PrivateEndpointServicesServiceArrayOutput
	ToPrivateEndpointServicesServiceArrayOutputWithContext(context.Context) PrivateEndpointServicesServiceArrayOutput
}

type PrivateEndpointServicesServiceArray []PrivateEndpointServicesServiceInput

func (PrivateEndpointServicesServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointServicesService)(nil)).Elem()
}

func (i PrivateEndpointServicesServiceArray) ToPrivateEndpointServicesServiceArrayOutput() PrivateEndpointServicesServiceArrayOutput {
	return i.ToPrivateEndpointServicesServiceArrayOutputWithContext(context.Background())
}

func (i PrivateEndpointServicesServiceArray) ToPrivateEndpointServicesServiceArrayOutputWithContext(ctx context.Context) PrivateEndpointServicesServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointServicesServiceArrayOutput)
}

type PrivateEndpointServicesServiceOutput struct{ *pulumi.OutputState }

func (PrivateEndpointServicesServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointServicesService)(nil)).Elem()
}

func (o PrivateEndpointServicesServiceOutput) ToPrivateEndpointServicesServiceOutput() PrivateEndpointServicesServiceOutput {
	return o
}

func (o PrivateEndpointServicesServiceOutput) ToPrivateEndpointServicesServiceOutputWithContext(ctx context.Context) PrivateEndpointServicesServiceOutput {
	return o
}

func (o PrivateEndpointServicesServiceOutput) Aws() PrivateEndpointServicesServiceAwsPtrOutput {
	return o.ApplyT(func(v PrivateEndpointServicesService) *PrivateEndpointServicesServiceAws { return v.Aws }).(PrivateEndpointServicesServiceAwsPtrOutput)
}

// Cloud provider associated with this service.
func (o PrivateEndpointServicesServiceOutput) CloudProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointServicesService) *string { return v.CloudProvider }).(pulumi.StringPtrOutput)
}

// Cloud provider region code associated with this service.
func (o PrivateEndpointServicesServiceOutput) RegionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointServicesService) *string { return v.RegionName }).(pulumi.StringPtrOutput)
}

// Operation status of the service.
func (o PrivateEndpointServicesServiceOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointServicesService) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateEndpointServicesServiceArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointServicesServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointServicesService)(nil)).Elem()
}

func (o PrivateEndpointServicesServiceArrayOutput) ToPrivateEndpointServicesServiceArrayOutput() PrivateEndpointServicesServiceArrayOutput {
	return o
}

func (o PrivateEndpointServicesServiceArrayOutput) ToPrivateEndpointServicesServiceArrayOutputWithContext(ctx context.Context) PrivateEndpointServicesServiceArrayOutput {
	return o
}

func (o PrivateEndpointServicesServiceArrayOutput) Index(i pulumi.IntInput) PrivateEndpointServicesServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointServicesService {
		return vs[0].([]PrivateEndpointServicesService)[vs[1].(int)]
	}).(PrivateEndpointServicesServiceOutput)
}

type PrivateEndpointServicesServiceAws struct {
	// AZ IDs users should create their VPCs in to minimize their cost.
	AvailabilityZoneIds []string `pulumi:"availabilityZoneIds"`
	// Server side ID of the PrivateLink connection.
	ServiceId *string `pulumi:"serviceId"`
	// AWS service name used to create endpoints.
	ServiceName *string `pulumi:"serviceName"`
}

// PrivateEndpointServicesServiceAwsInput is an input type that accepts PrivateEndpointServicesServiceAwsArgs and PrivateEndpointServicesServiceAwsOutput values.
// You can construct a concrete instance of `PrivateEndpointServicesServiceAwsInput` via:
//
//	PrivateEndpointServicesServiceAwsArgs{...}
type PrivateEndpointServicesServiceAwsInput interface {
	pulumi.Input

	ToPrivateEndpointServicesServiceAwsOutput() PrivateEndpointServicesServiceAwsOutput
	ToPrivateEndpointServicesServiceAwsOutputWithContext(context.Context) PrivateEndpointServicesServiceAwsOutput
}

type PrivateEndpointServicesServiceAwsArgs struct {
	// AZ IDs users should create their VPCs in to minimize their cost.
	AvailabilityZoneIds pulumi.StringArrayInput `pulumi:"availabilityZoneIds"`
	// Server side ID of the PrivateLink connection.
	ServiceId pulumi.StringPtrInput `pulumi:"serviceId"`
	// AWS service name used to create endpoints.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (PrivateEndpointServicesServiceAwsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointServicesServiceAws)(nil)).Elem()
}

func (i PrivateEndpointServicesServiceAwsArgs) ToPrivateEndpointServicesServiceAwsOutput() PrivateEndpointServicesServiceAwsOutput {
	return i.ToPrivateEndpointServicesServiceAwsOutputWithContext(context.Background())
}

func (i PrivateEndpointServicesServiceAwsArgs) ToPrivateEndpointServicesServiceAwsOutputWithContext(ctx context.Context) PrivateEndpointServicesServiceAwsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointServicesServiceAwsOutput)
}

func (i PrivateEndpointServicesServiceAwsArgs) ToPrivateEndpointServicesServiceAwsPtrOutput() PrivateEndpointServicesServiceAwsPtrOutput {
	return i.ToPrivateEndpointServicesServiceAwsPtrOutputWithContext(context.Background())
}

func (i PrivateEndpointServicesServiceAwsArgs) ToPrivateEndpointServicesServiceAwsPtrOutputWithContext(ctx context.Context) PrivateEndpointServicesServiceAwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointServicesServiceAwsOutput).ToPrivateEndpointServicesServiceAwsPtrOutputWithContext(ctx)
}

// PrivateEndpointServicesServiceAwsPtrInput is an input type that accepts PrivateEndpointServicesServiceAwsArgs, PrivateEndpointServicesServiceAwsPtr and PrivateEndpointServicesServiceAwsPtrOutput values.
// You can construct a concrete instance of `PrivateEndpointServicesServiceAwsPtrInput` via:
//
//	        PrivateEndpointServicesServiceAwsArgs{...}
//
//	or:
//
//	        nil
type PrivateEndpointServicesServiceAwsPtrInput interface {
	pulumi.Input

	ToPrivateEndpointServicesServiceAwsPtrOutput() PrivateEndpointServicesServiceAwsPtrOutput
	ToPrivateEndpointServicesServiceAwsPtrOutputWithContext(context.Context) PrivateEndpointServicesServiceAwsPtrOutput
}

type privateEndpointServicesServiceAwsPtrType PrivateEndpointServicesServiceAwsArgs

func PrivateEndpointServicesServiceAwsPtr(v *PrivateEndpointServicesServiceAwsArgs) PrivateEndpointServicesServiceAwsPtrInput {
	return (*privateEndpointServicesServiceAwsPtrType)(v)
}

func (*privateEndpointServicesServiceAwsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointServicesServiceAws)(nil)).Elem()
}

func (i *privateEndpointServicesServiceAwsPtrType) ToPrivateEndpointServicesServiceAwsPtrOutput() PrivateEndpointServicesServiceAwsPtrOutput {
	return i.ToPrivateEndpointServicesServiceAwsPtrOutputWithContext(context.Background())
}

func (i *privateEndpointServicesServiceAwsPtrType) ToPrivateEndpointServicesServiceAwsPtrOutputWithContext(ctx context.Context) PrivateEndpointServicesServiceAwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointServicesServiceAwsPtrOutput)
}

type PrivateEndpointServicesServiceAwsOutput struct{ *pulumi.OutputState }

func (PrivateEndpointServicesServiceAwsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointServicesServiceAws)(nil)).Elem()
}

func (o PrivateEndpointServicesServiceAwsOutput) ToPrivateEndpointServicesServiceAwsOutput() PrivateEndpointServicesServiceAwsOutput {
	return o
}

func (o PrivateEndpointServicesServiceAwsOutput) ToPrivateEndpointServicesServiceAwsOutputWithContext(ctx context.Context) PrivateEndpointServicesServiceAwsOutput {
	return o
}

func (o PrivateEndpointServicesServiceAwsOutput) ToPrivateEndpointServicesServiceAwsPtrOutput() PrivateEndpointServicesServiceAwsPtrOutput {
	return o.ToPrivateEndpointServicesServiceAwsPtrOutputWithContext(context.Background())
}

func (o PrivateEndpointServicesServiceAwsOutput) ToPrivateEndpointServicesServiceAwsPtrOutputWithContext(ctx context.Context) PrivateEndpointServicesServiceAwsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateEndpointServicesServiceAws) *PrivateEndpointServicesServiceAws {
		return &v
	}).(PrivateEndpointServicesServiceAwsPtrOutput)
}

// AZ IDs users should create their VPCs in to minimize their cost.
func (o PrivateEndpointServicesServiceAwsOutput) AvailabilityZoneIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateEndpointServicesServiceAws) []string { return v.AvailabilityZoneIds }).(pulumi.StringArrayOutput)
}

// Server side ID of the PrivateLink connection.
func (o PrivateEndpointServicesServiceAwsOutput) ServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointServicesServiceAws) *string { return v.ServiceId }).(pulumi.StringPtrOutput)
}

// AWS service name used to create endpoints.
func (o PrivateEndpointServicesServiceAwsOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointServicesServiceAws) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type PrivateEndpointServicesServiceAwsPtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointServicesServiceAwsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointServicesServiceAws)(nil)).Elem()
}

func (o PrivateEndpointServicesServiceAwsPtrOutput) ToPrivateEndpointServicesServiceAwsPtrOutput() PrivateEndpointServicesServiceAwsPtrOutput {
	return o
}

func (o PrivateEndpointServicesServiceAwsPtrOutput) ToPrivateEndpointServicesServiceAwsPtrOutputWithContext(ctx context.Context) PrivateEndpointServicesServiceAwsPtrOutput {
	return o
}

func (o PrivateEndpointServicesServiceAwsPtrOutput) Elem() PrivateEndpointServicesServiceAwsOutput {
	return o.ApplyT(func(v *PrivateEndpointServicesServiceAws) PrivateEndpointServicesServiceAws {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointServicesServiceAws
		return ret
	}).(PrivateEndpointServicesServiceAwsOutput)
}

// AZ IDs users should create their VPCs in to minimize their cost.
func (o PrivateEndpointServicesServiceAwsPtrOutput) AvailabilityZoneIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PrivateEndpointServicesServiceAws) []string {
		if v == nil {
			return nil
		}
		return v.AvailabilityZoneIds
	}).(pulumi.StringArrayOutput)
}

// Server side ID of the PrivateLink connection.
func (o PrivateEndpointServicesServiceAwsPtrOutput) ServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointServicesServiceAws) *string {
		if v == nil {
			return nil
		}
		return v.ServiceId
	}).(pulumi.StringPtrOutput)
}

// AWS service name used to create endpoints.
func (o PrivateEndpointServicesServiceAwsPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointServicesServiceAws) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

type UserRoleGrantsRole struct {
	// ID of the resource. Omit if resourceType is 'ORGANIZATION'.
	ResourceId *string `pulumi:"resourceId"`
	// Type of resource. Allowed values are:
	//   * ORGANIZATION
	//   * CLUSTER
	//   * FOLDER
	ResourceType string `pulumi:"resourceType"`
	// Name of the role to grant. Allowed values are:
	//   * DEVELOPER
	//   * ADMIN
	//   * BILLING_COORDINATOR
	//   * ORG_ADMIN
	//   * ORG_MEMBER
	//   * CLUSTER_ADMIN
	//   * CLUSTER_OPERATOR_WRITER
	//   * CLUSTER_DEVELOPER
	//   * CLUSTER_CREATOR
	//   * FOLDER_ADMIN
	//   * FOLDER_MOVER
	RoleName string `pulumi:"roleName"`
}

// UserRoleGrantsRoleInput is an input type that accepts UserRoleGrantsRoleArgs and UserRoleGrantsRoleOutput values.
// You can construct a concrete instance of `UserRoleGrantsRoleInput` via:
//
//	UserRoleGrantsRoleArgs{...}
type UserRoleGrantsRoleInput interface {
	pulumi.Input

	ToUserRoleGrantsRoleOutput() UserRoleGrantsRoleOutput
	ToUserRoleGrantsRoleOutputWithContext(context.Context) UserRoleGrantsRoleOutput
}

type UserRoleGrantsRoleArgs struct {
	// ID of the resource. Omit if resourceType is 'ORGANIZATION'.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
	// Type of resource. Allowed values are:
	//   * ORGANIZATION
	//   * CLUSTER
	//   * FOLDER
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
	// Name of the role to grant. Allowed values are:
	//   * DEVELOPER
	//   * ADMIN
	//   * BILLING_COORDINATOR
	//   * ORG_ADMIN
	//   * ORG_MEMBER
	//   * CLUSTER_ADMIN
	//   * CLUSTER_OPERATOR_WRITER
	//   * CLUSTER_DEVELOPER
	//   * CLUSTER_CREATOR
	//   * FOLDER_ADMIN
	//   * FOLDER_MOVER
	RoleName pulumi.StringInput `pulumi:"roleName"`
}

func (UserRoleGrantsRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserRoleGrantsRole)(nil)).Elem()
}

func (i UserRoleGrantsRoleArgs) ToUserRoleGrantsRoleOutput() UserRoleGrantsRoleOutput {
	return i.ToUserRoleGrantsRoleOutputWithContext(context.Background())
}

func (i UserRoleGrantsRoleArgs) ToUserRoleGrantsRoleOutputWithContext(ctx context.Context) UserRoleGrantsRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserRoleGrantsRoleOutput)
}

// UserRoleGrantsRoleArrayInput is an input type that accepts UserRoleGrantsRoleArray and UserRoleGrantsRoleArrayOutput values.
// You can construct a concrete instance of `UserRoleGrantsRoleArrayInput` via:
//
//	UserRoleGrantsRoleArray{ UserRoleGrantsRoleArgs{...} }
type UserRoleGrantsRoleArrayInput interface {
	pulumi.Input

	ToUserRoleGrantsRoleArrayOutput() UserRoleGrantsRoleArrayOutput
	ToUserRoleGrantsRoleArrayOutputWithContext(context.Context) UserRoleGrantsRoleArrayOutput
}

type UserRoleGrantsRoleArray []UserRoleGrantsRoleInput

func (UserRoleGrantsRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserRoleGrantsRole)(nil)).Elem()
}

func (i UserRoleGrantsRoleArray) ToUserRoleGrantsRoleArrayOutput() UserRoleGrantsRoleArrayOutput {
	return i.ToUserRoleGrantsRoleArrayOutputWithContext(context.Background())
}

func (i UserRoleGrantsRoleArray) ToUserRoleGrantsRoleArrayOutputWithContext(ctx context.Context) UserRoleGrantsRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserRoleGrantsRoleArrayOutput)
}

type UserRoleGrantsRoleOutput struct{ *pulumi.OutputState }

func (UserRoleGrantsRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserRoleGrantsRole)(nil)).Elem()
}

func (o UserRoleGrantsRoleOutput) ToUserRoleGrantsRoleOutput() UserRoleGrantsRoleOutput {
	return o
}

func (o UserRoleGrantsRoleOutput) ToUserRoleGrantsRoleOutputWithContext(ctx context.Context) UserRoleGrantsRoleOutput {
	return o
}

// ID of the resource. Omit if resourceType is 'ORGANIZATION'.
func (o UserRoleGrantsRoleOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserRoleGrantsRole) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Type of resource. Allowed values are:
//   - ORGANIZATION
//   - CLUSTER
//   - FOLDER
func (o UserRoleGrantsRoleOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v UserRoleGrantsRole) string { return v.ResourceType }).(pulumi.StringOutput)
}

// Name of the role to grant. Allowed values are:
//   - DEVELOPER
//   - ADMIN
//   - BILLING_COORDINATOR
//   - ORG_ADMIN
//   - ORG_MEMBER
//   - CLUSTER_ADMIN
//   - CLUSTER_OPERATOR_WRITER
//   - CLUSTER_DEVELOPER
//   - CLUSTER_CREATOR
//   - FOLDER_ADMIN
//   - FOLDER_MOVER
func (o UserRoleGrantsRoleOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v UserRoleGrantsRole) string { return v.RoleName }).(pulumi.StringOutput)
}

type UserRoleGrantsRoleArrayOutput struct{ *pulumi.OutputState }

func (UserRoleGrantsRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserRoleGrantsRole)(nil)).Elem()
}

func (o UserRoleGrantsRoleArrayOutput) ToUserRoleGrantsRoleArrayOutput() UserRoleGrantsRoleArrayOutput {
	return o
}

func (o UserRoleGrantsRoleArrayOutput) ToUserRoleGrantsRoleArrayOutputWithContext(ctx context.Context) UserRoleGrantsRoleArrayOutput {
	return o
}

func (o UserRoleGrantsRoleArrayOutput) Index(i pulumi.IntInput) UserRoleGrantsRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserRoleGrantsRole {
		return vs[0].([]UserRoleGrantsRole)[vs[1].(int)]
	}).(UserRoleGrantsRoleOutput)
}

type GetCockroachClusterDedicated struct {
	// Number of disk I/O operations per second that are permitted on each node in the cluster. Zero indicates the cloud provider-specific default.
	DiskIops int `pulumi:"diskIops"`
	// Machine type identifier within the given cloud provider, ex. m6.xlarge, n2-standard-4.
	MachineType string `pulumi:"machineType"`
	// Memory per node in GiB.
	MemoryGib float64 `pulumi:"memoryGib"`
	// Number of virtual CPUs per node in the cluster.
	NumVirtualCpus int `pulumi:"numVirtualCpus"`
	// Indicates whether private IP addresses are assigned to nodes. Required for CMEK and other advanced networking features.
	PrivateNetworkVisibility bool `pulumi:"privateNetworkVisibility"`
	// Storage amount per node in GiB.
	StorageGib int `pulumi:"storageGib"`
}

// GetCockroachClusterDedicatedInput is an input type that accepts GetCockroachClusterDedicatedArgs and GetCockroachClusterDedicatedOutput values.
// You can construct a concrete instance of `GetCockroachClusterDedicatedInput` via:
//
//	GetCockroachClusterDedicatedArgs{...}
type GetCockroachClusterDedicatedInput interface {
	pulumi.Input

	ToGetCockroachClusterDedicatedOutput() GetCockroachClusterDedicatedOutput
	ToGetCockroachClusterDedicatedOutputWithContext(context.Context) GetCockroachClusterDedicatedOutput
}

type GetCockroachClusterDedicatedArgs struct {
	// Number of disk I/O operations per second that are permitted on each node in the cluster. Zero indicates the cloud provider-specific default.
	DiskIops pulumi.IntInput `pulumi:"diskIops"`
	// Machine type identifier within the given cloud provider, ex. m6.xlarge, n2-standard-4.
	MachineType pulumi.StringInput `pulumi:"machineType"`
	// Memory per node in GiB.
	MemoryGib pulumi.Float64Input `pulumi:"memoryGib"`
	// Number of virtual CPUs per node in the cluster.
	NumVirtualCpus pulumi.IntInput `pulumi:"numVirtualCpus"`
	// Indicates whether private IP addresses are assigned to nodes. Required for CMEK and other advanced networking features.
	PrivateNetworkVisibility pulumi.BoolInput `pulumi:"privateNetworkVisibility"`
	// Storage amount per node in GiB.
	StorageGib pulumi.IntInput `pulumi:"storageGib"`
}

func (GetCockroachClusterDedicatedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCockroachClusterDedicated)(nil)).Elem()
}

func (i GetCockroachClusterDedicatedArgs) ToGetCockroachClusterDedicatedOutput() GetCockroachClusterDedicatedOutput {
	return i.ToGetCockroachClusterDedicatedOutputWithContext(context.Background())
}

func (i GetCockroachClusterDedicatedArgs) ToGetCockroachClusterDedicatedOutputWithContext(ctx context.Context) GetCockroachClusterDedicatedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCockroachClusterDedicatedOutput)
}

type GetCockroachClusterDedicatedOutput struct{ *pulumi.OutputState }

func (GetCockroachClusterDedicatedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCockroachClusterDedicated)(nil)).Elem()
}

func (o GetCockroachClusterDedicatedOutput) ToGetCockroachClusterDedicatedOutput() GetCockroachClusterDedicatedOutput {
	return o
}

func (o GetCockroachClusterDedicatedOutput) ToGetCockroachClusterDedicatedOutputWithContext(ctx context.Context) GetCockroachClusterDedicatedOutput {
	return o
}

// Number of disk I/O operations per second that are permitted on each node in the cluster. Zero indicates the cloud provider-specific default.
func (o GetCockroachClusterDedicatedOutput) DiskIops() pulumi.IntOutput {
	return o.ApplyT(func(v GetCockroachClusterDedicated) int { return v.DiskIops }).(pulumi.IntOutput)
}

// Machine type identifier within the given cloud provider, ex. m6.xlarge, n2-standard-4.
func (o GetCockroachClusterDedicatedOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v GetCockroachClusterDedicated) string { return v.MachineType }).(pulumi.StringOutput)
}

// Memory per node in GiB.
func (o GetCockroachClusterDedicatedOutput) MemoryGib() pulumi.Float64Output {
	return o.ApplyT(func(v GetCockroachClusterDedicated) float64 { return v.MemoryGib }).(pulumi.Float64Output)
}

// Number of virtual CPUs per node in the cluster.
func (o GetCockroachClusterDedicatedOutput) NumVirtualCpus() pulumi.IntOutput {
	return o.ApplyT(func(v GetCockroachClusterDedicated) int { return v.NumVirtualCpus }).(pulumi.IntOutput)
}

// Indicates whether private IP addresses are assigned to nodes. Required for CMEK and other advanced networking features.
func (o GetCockroachClusterDedicatedOutput) PrivateNetworkVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCockroachClusterDedicated) bool { return v.PrivateNetworkVisibility }).(pulumi.BoolOutput)
}

// Storage amount per node in GiB.
func (o GetCockroachClusterDedicatedOutput) StorageGib() pulumi.IntOutput {
	return o.ApplyT(func(v GetCockroachClusterDedicated) int { return v.StorageGib }).(pulumi.IntOutput)
}

type GetCockroachClusterRegion struct {
	// Internal DNS name of the cluster within the cloud provider's network. Used to connect to the cluster with PrivateLink or VPC peering.
	InternalDns string `pulumi:"internalDns"`
	// Region code used by the cluster's cloud provider.
	Name string `pulumi:"name"`
	// Number of nodes in the region. Will always be 0 for serverless clusters.
	NodeCount int `pulumi:"nodeCount"`
	// Denotes whether this is the primary region in a serverless cluster. Dedicated clusters don't have a primary region.
	Primary bool `pulumi:"primary"`
	// DNS name of the cluster's SQL interface. Used to connect to the cluster with IP allowlisting.
	SqlDns string `pulumi:"sqlDns"`
	// DNS name used when connecting to the DB Console for the cluster.
	UiDns string `pulumi:"uiDns"`
}

// GetCockroachClusterRegionInput is an input type that accepts GetCockroachClusterRegionArgs and GetCockroachClusterRegionOutput values.
// You can construct a concrete instance of `GetCockroachClusterRegionInput` via:
//
//	GetCockroachClusterRegionArgs{...}
type GetCockroachClusterRegionInput interface {
	pulumi.Input

	ToGetCockroachClusterRegionOutput() GetCockroachClusterRegionOutput
	ToGetCockroachClusterRegionOutputWithContext(context.Context) GetCockroachClusterRegionOutput
}

type GetCockroachClusterRegionArgs struct {
	// Internal DNS name of the cluster within the cloud provider's network. Used to connect to the cluster with PrivateLink or VPC peering.
	InternalDns pulumi.StringInput `pulumi:"internalDns"`
	// Region code used by the cluster's cloud provider.
	Name pulumi.StringInput `pulumi:"name"`
	// Number of nodes in the region. Will always be 0 for serverless clusters.
	NodeCount pulumi.IntInput `pulumi:"nodeCount"`
	// Denotes whether this is the primary region in a serverless cluster. Dedicated clusters don't have a primary region.
	Primary pulumi.BoolInput `pulumi:"primary"`
	// DNS name of the cluster's SQL interface. Used to connect to the cluster with IP allowlisting.
	SqlDns pulumi.StringInput `pulumi:"sqlDns"`
	// DNS name used when connecting to the DB Console for the cluster.
	UiDns pulumi.StringInput `pulumi:"uiDns"`
}

func (GetCockroachClusterRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCockroachClusterRegion)(nil)).Elem()
}

func (i GetCockroachClusterRegionArgs) ToGetCockroachClusterRegionOutput() GetCockroachClusterRegionOutput {
	return i.ToGetCockroachClusterRegionOutputWithContext(context.Background())
}

func (i GetCockroachClusterRegionArgs) ToGetCockroachClusterRegionOutputWithContext(ctx context.Context) GetCockroachClusterRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCockroachClusterRegionOutput)
}

// GetCockroachClusterRegionArrayInput is an input type that accepts GetCockroachClusterRegionArray and GetCockroachClusterRegionArrayOutput values.
// You can construct a concrete instance of `GetCockroachClusterRegionArrayInput` via:
//
//	GetCockroachClusterRegionArray{ GetCockroachClusterRegionArgs{...} }
type GetCockroachClusterRegionArrayInput interface {
	pulumi.Input

	ToGetCockroachClusterRegionArrayOutput() GetCockroachClusterRegionArrayOutput
	ToGetCockroachClusterRegionArrayOutputWithContext(context.Context) GetCockroachClusterRegionArrayOutput
}

type GetCockroachClusterRegionArray []GetCockroachClusterRegionInput

func (GetCockroachClusterRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCockroachClusterRegion)(nil)).Elem()
}

func (i GetCockroachClusterRegionArray) ToGetCockroachClusterRegionArrayOutput() GetCockroachClusterRegionArrayOutput {
	return i.ToGetCockroachClusterRegionArrayOutputWithContext(context.Background())
}

func (i GetCockroachClusterRegionArray) ToGetCockroachClusterRegionArrayOutputWithContext(ctx context.Context) GetCockroachClusterRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCockroachClusterRegionArrayOutput)
}

type GetCockroachClusterRegionOutput struct{ *pulumi.OutputState }

func (GetCockroachClusterRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCockroachClusterRegion)(nil)).Elem()
}

func (o GetCockroachClusterRegionOutput) ToGetCockroachClusterRegionOutput() GetCockroachClusterRegionOutput {
	return o
}

func (o GetCockroachClusterRegionOutput) ToGetCockroachClusterRegionOutputWithContext(ctx context.Context) GetCockroachClusterRegionOutput {
	return o
}

// Internal DNS name of the cluster within the cloud provider's network. Used to connect to the cluster with PrivateLink or VPC peering.
func (o GetCockroachClusterRegionOutput) InternalDns() pulumi.StringOutput {
	return o.ApplyT(func(v GetCockroachClusterRegion) string { return v.InternalDns }).(pulumi.StringOutput)
}

// Region code used by the cluster's cloud provider.
func (o GetCockroachClusterRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCockroachClusterRegion) string { return v.Name }).(pulumi.StringOutput)
}

// Number of nodes in the region. Will always be 0 for serverless clusters.
func (o GetCockroachClusterRegionOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetCockroachClusterRegion) int { return v.NodeCount }).(pulumi.IntOutput)
}

// Denotes whether this is the primary region in a serverless cluster. Dedicated clusters don't have a primary region.
func (o GetCockroachClusterRegionOutput) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCockroachClusterRegion) bool { return v.Primary }).(pulumi.BoolOutput)
}

// DNS name of the cluster's SQL interface. Used to connect to the cluster with IP allowlisting.
func (o GetCockroachClusterRegionOutput) SqlDns() pulumi.StringOutput {
	return o.ApplyT(func(v GetCockroachClusterRegion) string { return v.SqlDns }).(pulumi.StringOutput)
}

// DNS name used when connecting to the DB Console for the cluster.
func (o GetCockroachClusterRegionOutput) UiDns() pulumi.StringOutput {
	return o.ApplyT(func(v GetCockroachClusterRegion) string { return v.UiDns }).(pulumi.StringOutput)
}

type GetCockroachClusterRegionArrayOutput struct{ *pulumi.OutputState }

func (GetCockroachClusterRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCockroachClusterRegion)(nil)).Elem()
}

func (o GetCockroachClusterRegionArrayOutput) ToGetCockroachClusterRegionArrayOutput() GetCockroachClusterRegionArrayOutput {
	return o
}

func (o GetCockroachClusterRegionArrayOutput) ToGetCockroachClusterRegionArrayOutputWithContext(ctx context.Context) GetCockroachClusterRegionArrayOutput {
	return o
}

func (o GetCockroachClusterRegionArrayOutput) Index(i pulumi.IntInput) GetCockroachClusterRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCockroachClusterRegion {
		return vs[0].([]GetCockroachClusterRegion)[vs[1].(int)]
	}).(GetCockroachClusterRegionOutput)
}

type GetCockroachClusterServerless struct {
	// Cluster identifier in a connection string.
	RoutingId string `pulumi:"routingId"`
	// Spend limit in US cents.
	SpendLimit  int                                      `pulumi:"spendLimit"`
	UsageLimits GetCockroachClusterServerlessUsageLimits `pulumi:"usageLimits"`
}

// GetCockroachClusterServerlessInput is an input type that accepts GetCockroachClusterServerlessArgs and GetCockroachClusterServerlessOutput values.
// You can construct a concrete instance of `GetCockroachClusterServerlessInput` via:
//
//	GetCockroachClusterServerlessArgs{...}
type GetCockroachClusterServerlessInput interface {
	pulumi.Input

	ToGetCockroachClusterServerlessOutput() GetCockroachClusterServerlessOutput
	ToGetCockroachClusterServerlessOutputWithContext(context.Context) GetCockroachClusterServerlessOutput
}

type GetCockroachClusterServerlessArgs struct {
	// Cluster identifier in a connection string.
	RoutingId pulumi.StringInput `pulumi:"routingId"`
	// Spend limit in US cents.
	SpendLimit  pulumi.IntInput                               `pulumi:"spendLimit"`
	UsageLimits GetCockroachClusterServerlessUsageLimitsInput `pulumi:"usageLimits"`
}

func (GetCockroachClusterServerlessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCockroachClusterServerless)(nil)).Elem()
}

func (i GetCockroachClusterServerlessArgs) ToGetCockroachClusterServerlessOutput() GetCockroachClusterServerlessOutput {
	return i.ToGetCockroachClusterServerlessOutputWithContext(context.Background())
}

func (i GetCockroachClusterServerlessArgs) ToGetCockroachClusterServerlessOutputWithContext(ctx context.Context) GetCockroachClusterServerlessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCockroachClusterServerlessOutput)
}

type GetCockroachClusterServerlessOutput struct{ *pulumi.OutputState }

func (GetCockroachClusterServerlessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCockroachClusterServerless)(nil)).Elem()
}

func (o GetCockroachClusterServerlessOutput) ToGetCockroachClusterServerlessOutput() GetCockroachClusterServerlessOutput {
	return o
}

func (o GetCockroachClusterServerlessOutput) ToGetCockroachClusterServerlessOutputWithContext(ctx context.Context) GetCockroachClusterServerlessOutput {
	return o
}

// Cluster identifier in a connection string.
func (o GetCockroachClusterServerlessOutput) RoutingId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCockroachClusterServerless) string { return v.RoutingId }).(pulumi.StringOutput)
}

// Spend limit in US cents.
func (o GetCockroachClusterServerlessOutput) SpendLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetCockroachClusterServerless) int { return v.SpendLimit }).(pulumi.IntOutput)
}

func (o GetCockroachClusterServerlessOutput) UsageLimits() GetCockroachClusterServerlessUsageLimitsOutput {
	return o.ApplyT(func(v GetCockroachClusterServerless) GetCockroachClusterServerlessUsageLimits { return v.UsageLimits }).(GetCockroachClusterServerlessUsageLimitsOutput)
}

type GetCockroachClusterServerlessUsageLimits struct {
	// Maximum number of Request Units that the cluster can consume during the month.
	RequestUnitLimit int `pulumi:"requestUnitLimit"`
	// Maximum amount of storage (in MiB) that the cluster can have at any time during the month.
	StorageMibLimit int `pulumi:"storageMibLimit"`
}

// GetCockroachClusterServerlessUsageLimitsInput is an input type that accepts GetCockroachClusterServerlessUsageLimitsArgs and GetCockroachClusterServerlessUsageLimitsOutput values.
// You can construct a concrete instance of `GetCockroachClusterServerlessUsageLimitsInput` via:
//
//	GetCockroachClusterServerlessUsageLimitsArgs{...}
type GetCockroachClusterServerlessUsageLimitsInput interface {
	pulumi.Input

	ToGetCockroachClusterServerlessUsageLimitsOutput() GetCockroachClusterServerlessUsageLimitsOutput
	ToGetCockroachClusterServerlessUsageLimitsOutputWithContext(context.Context) GetCockroachClusterServerlessUsageLimitsOutput
}

type GetCockroachClusterServerlessUsageLimitsArgs struct {
	// Maximum number of Request Units that the cluster can consume during the month.
	RequestUnitLimit pulumi.IntInput `pulumi:"requestUnitLimit"`
	// Maximum amount of storage (in MiB) that the cluster can have at any time during the month.
	StorageMibLimit pulumi.IntInput `pulumi:"storageMibLimit"`
}

func (GetCockroachClusterServerlessUsageLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCockroachClusterServerlessUsageLimits)(nil)).Elem()
}

func (i GetCockroachClusterServerlessUsageLimitsArgs) ToGetCockroachClusterServerlessUsageLimitsOutput() GetCockroachClusterServerlessUsageLimitsOutput {
	return i.ToGetCockroachClusterServerlessUsageLimitsOutputWithContext(context.Background())
}

func (i GetCockroachClusterServerlessUsageLimitsArgs) ToGetCockroachClusterServerlessUsageLimitsOutputWithContext(ctx context.Context) GetCockroachClusterServerlessUsageLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCockroachClusterServerlessUsageLimitsOutput)
}

type GetCockroachClusterServerlessUsageLimitsOutput struct{ *pulumi.OutputState }

func (GetCockroachClusterServerlessUsageLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCockroachClusterServerlessUsageLimits)(nil)).Elem()
}

func (o GetCockroachClusterServerlessUsageLimitsOutput) ToGetCockroachClusterServerlessUsageLimitsOutput() GetCockroachClusterServerlessUsageLimitsOutput {
	return o
}

func (o GetCockroachClusterServerlessUsageLimitsOutput) ToGetCockroachClusterServerlessUsageLimitsOutputWithContext(ctx context.Context) GetCockroachClusterServerlessUsageLimitsOutput {
	return o
}

// Maximum number of Request Units that the cluster can consume during the month.
func (o GetCockroachClusterServerlessUsageLimitsOutput) RequestUnitLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetCockroachClusterServerlessUsageLimits) int { return v.RequestUnitLimit }).(pulumi.IntOutput)
}

// Maximum amount of storage (in MiB) that the cluster can have at any time during the month.
func (o GetCockroachClusterServerlessUsageLimitsOutput) StorageMibLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetCockroachClusterServerlessUsageLimits) int { return v.StorageMibLimit }).(pulumi.IntOutput)
}

type GetConnectionStringConnectionParams struct {
	// Database value to use in a connection URL.
	Database string `pulumi:"database"`
	// Host value to use in a connection URL.
	Host string `pulumi:"host"`
	// Password value to use in a connection URL.
	Password string `pulumi:"password"`
	// Port value to use in a connection URL.
	Port string `pulumi:"port"`
	// Username value to use in a connection URL.
	Username string `pulumi:"username"`
}

// GetConnectionStringConnectionParamsInput is an input type that accepts GetConnectionStringConnectionParamsArgs and GetConnectionStringConnectionParamsOutput values.
// You can construct a concrete instance of `GetConnectionStringConnectionParamsInput` via:
//
//	GetConnectionStringConnectionParamsArgs{...}
type GetConnectionStringConnectionParamsInput interface {
	pulumi.Input

	ToGetConnectionStringConnectionParamsOutput() GetConnectionStringConnectionParamsOutput
	ToGetConnectionStringConnectionParamsOutputWithContext(context.Context) GetConnectionStringConnectionParamsOutput
}

type GetConnectionStringConnectionParamsArgs struct {
	// Database value to use in a connection URL.
	Database pulumi.StringInput `pulumi:"database"`
	// Host value to use in a connection URL.
	Host pulumi.StringInput `pulumi:"host"`
	// Password value to use in a connection URL.
	Password pulumi.StringInput `pulumi:"password"`
	// Port value to use in a connection URL.
	Port pulumi.StringInput `pulumi:"port"`
	// Username value to use in a connection URL.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetConnectionStringConnectionParamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConnectionStringConnectionParams)(nil)).Elem()
}

func (i GetConnectionStringConnectionParamsArgs) ToGetConnectionStringConnectionParamsOutput() GetConnectionStringConnectionParamsOutput {
	return i.ToGetConnectionStringConnectionParamsOutputWithContext(context.Background())
}

func (i GetConnectionStringConnectionParamsArgs) ToGetConnectionStringConnectionParamsOutputWithContext(ctx context.Context) GetConnectionStringConnectionParamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetConnectionStringConnectionParamsOutput)
}

type GetConnectionStringConnectionParamsOutput struct{ *pulumi.OutputState }

func (GetConnectionStringConnectionParamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConnectionStringConnectionParams)(nil)).Elem()
}

func (o GetConnectionStringConnectionParamsOutput) ToGetConnectionStringConnectionParamsOutput() GetConnectionStringConnectionParamsOutput {
	return o
}

func (o GetConnectionStringConnectionParamsOutput) ToGetConnectionStringConnectionParamsOutputWithContext(ctx context.Context) GetConnectionStringConnectionParamsOutput {
	return o
}

// Database value to use in a connection URL.
func (o GetConnectionStringConnectionParamsOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectionStringConnectionParams) string { return v.Database }).(pulumi.StringOutput)
}

// Host value to use in a connection URL.
func (o GetConnectionStringConnectionParamsOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectionStringConnectionParams) string { return v.Host }).(pulumi.StringOutput)
}

// Password value to use in a connection URL.
func (o GetConnectionStringConnectionParamsOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectionStringConnectionParams) string { return v.Password }).(pulumi.StringOutput)
}

// Port value to use in a connection URL.
func (o GetConnectionStringConnectionParamsOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectionStringConnectionParams) string { return v.Port }).(pulumi.StringOutput)
}

// Username value to use in a connection URL.
func (o GetConnectionStringConnectionParamsOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectionStringConnectionParams) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiOidcConfigIdentityMapInput)(nil)).Elem(), ApiOidcConfigIdentityMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiOidcConfigIdentityMapArrayInput)(nil)).Elem(), ApiOidcConfigIdentityMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterDedicatedInput)(nil)).Elem(), ClusterDedicatedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterDedicatedPtrInput)(nil)).Elem(), ClusterDedicatedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterRegionInput)(nil)).Elem(), ClusterRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterRegionArrayInput)(nil)).Elem(), ClusterRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterServerlessInput)(nil)).Elem(), ClusterServerlessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterServerlessPtrInput)(nil)).Elem(), ClusterServerlessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterServerlessUsageLimitsInput)(nil)).Elem(), ClusterServerlessUsageLimitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterServerlessUsageLimitsPtrInput)(nil)).Elem(), ClusterServerlessUsageLimitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CmekAdditionalRegionInput)(nil)).Elem(), CmekAdditionalRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CmekAdditionalRegionArrayInput)(nil)).Elem(), CmekAdditionalRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CmekRegionInput)(nil)).Elem(), CmekRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CmekRegionArrayInput)(nil)).Elem(), CmekRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CmekRegionKeyInput)(nil)).Elem(), CmekRegionKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogExportConfigGroupInput)(nil)).Elem(), LogExportConfigGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogExportConfigGroupArrayInput)(nil)).Elem(), LogExportConfigGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateEndpointServicesServiceInput)(nil)).Elem(), PrivateEndpointServicesServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateEndpointServicesServiceArrayInput)(nil)).Elem(), PrivateEndpointServicesServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateEndpointServicesServiceAwsInput)(nil)).Elem(), PrivateEndpointServicesServiceAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateEndpointServicesServiceAwsPtrInput)(nil)).Elem(), PrivateEndpointServicesServiceAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserRoleGrantsRoleInput)(nil)).Elem(), UserRoleGrantsRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserRoleGrantsRoleArrayInput)(nil)).Elem(), UserRoleGrantsRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCockroachClusterDedicatedInput)(nil)).Elem(), GetCockroachClusterDedicatedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCockroachClusterRegionInput)(nil)).Elem(), GetCockroachClusterRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCockroachClusterRegionArrayInput)(nil)).Elem(), GetCockroachClusterRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCockroachClusterServerlessInput)(nil)).Elem(), GetCockroachClusterServerlessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCockroachClusterServerlessUsageLimitsInput)(nil)).Elem(), GetCockroachClusterServerlessUsageLimitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetConnectionStringConnectionParamsInput)(nil)).Elem(), GetConnectionStringConnectionParamsArgs{})
	pulumi.RegisterOutputType(ApiOidcConfigIdentityMapOutput{})
	pulumi.RegisterOutputType(ApiOidcConfigIdentityMapArrayOutput{})
	pulumi.RegisterOutputType(ClusterDedicatedOutput{})
	pulumi.RegisterOutputType(ClusterDedicatedPtrOutput{})
	pulumi.RegisterOutputType(ClusterRegionOutput{})
	pulumi.RegisterOutputType(ClusterRegionArrayOutput{})
	pulumi.RegisterOutputType(ClusterServerlessOutput{})
	pulumi.RegisterOutputType(ClusterServerlessPtrOutput{})
	pulumi.RegisterOutputType(ClusterServerlessUsageLimitsOutput{})
	pulumi.RegisterOutputType(ClusterServerlessUsageLimitsPtrOutput{})
	pulumi.RegisterOutputType(CmekAdditionalRegionOutput{})
	pulumi.RegisterOutputType(CmekAdditionalRegionArrayOutput{})
	pulumi.RegisterOutputType(CmekRegionOutput{})
	pulumi.RegisterOutputType(CmekRegionArrayOutput{})
	pulumi.RegisterOutputType(CmekRegionKeyOutput{})
	pulumi.RegisterOutputType(LogExportConfigGroupOutput{})
	pulumi.RegisterOutputType(LogExportConfigGroupArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointServicesServiceOutput{})
	pulumi.RegisterOutputType(PrivateEndpointServicesServiceArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointServicesServiceAwsOutput{})
	pulumi.RegisterOutputType(PrivateEndpointServicesServiceAwsPtrOutput{})
	pulumi.RegisterOutputType(UserRoleGrantsRoleOutput{})
	pulumi.RegisterOutputType(UserRoleGrantsRoleArrayOutput{})
	pulumi.RegisterOutputType(GetCockroachClusterDedicatedOutput{})
	pulumi.RegisterOutputType(GetCockroachClusterRegionOutput{})
	pulumi.RegisterOutputType(GetCockroachClusterRegionArrayOutput{})
	pulumi.RegisterOutputType(GetCockroachClusterServerlessOutput{})
	pulumi.RegisterOutputType(GetCockroachClusterServerlessUsageLimitsOutput{})
	pulumi.RegisterOutputType(GetConnectionStringConnectionParamsOutput{})
}
