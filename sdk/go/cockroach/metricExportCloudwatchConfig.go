// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cockroach

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-cockroach/sdk/go/cockroach/internal"
)

// Amazon CloudWatch metric export configuration for a cluster.
type MetricExportCloudwatchConfig struct {
	pulumi.CustomResourceState

	// Cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The customized AWS CloudWatch log group name.
	LogGroupName pulumi.StringOutput `pulumi:"logGroupName"`
	// The IAM role used to upload metric segments to the target AWS account.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// Encodes the possible states that a metric export configuration can be in as it is created, deployed, and disabled.
	Status pulumi.StringOutput `pulumi:"status"`
	// The specific AWS region that the metrics will be exported to.
	TargetRegion pulumi.StringOutput `pulumi:"targetRegion"`
	// Elaborates on the metric export status and hints at how to fix issues that may have occurred during asynchronous operations.
	UserMessage pulumi.StringOutput `pulumi:"userMessage"`
}

// NewMetricExportCloudwatchConfig registers a new resource with the given unique name, arguments, and options.
func NewMetricExportCloudwatchConfig(ctx *pulumi.Context,
	name string, args *MetricExportCloudwatchConfigArgs, opts ...pulumi.ResourceOption) (*MetricExportCloudwatchConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetricExportCloudwatchConfig
	err := ctx.RegisterResource("cockroach:index/metricExportCloudwatchConfig:MetricExportCloudwatchConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricExportCloudwatchConfig gets an existing MetricExportCloudwatchConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricExportCloudwatchConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricExportCloudwatchConfigState, opts ...pulumi.ResourceOption) (*MetricExportCloudwatchConfig, error) {
	var resource MetricExportCloudwatchConfig
	err := ctx.ReadResource("cockroach:index/metricExportCloudwatchConfig:MetricExportCloudwatchConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricExportCloudwatchConfig resources.
type metricExportCloudwatchConfigState struct {
	// Cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// The customized AWS CloudWatch log group name.
	LogGroupName *string `pulumi:"logGroupName"`
	// The IAM role used to upload metric segments to the target AWS account.
	RoleArn *string `pulumi:"roleArn"`
	// Encodes the possible states that a metric export configuration can be in as it is created, deployed, and disabled.
	Status *string `pulumi:"status"`
	// The specific AWS region that the metrics will be exported to.
	TargetRegion *string `pulumi:"targetRegion"`
	// Elaborates on the metric export status and hints at how to fix issues that may have occurred during asynchronous operations.
	UserMessage *string `pulumi:"userMessage"`
}

type MetricExportCloudwatchConfigState struct {
	// Cluster ID.
	ClusterId pulumi.StringPtrInput
	// The customized AWS CloudWatch log group name.
	LogGroupName pulumi.StringPtrInput
	// The IAM role used to upload metric segments to the target AWS account.
	RoleArn pulumi.StringPtrInput
	// Encodes the possible states that a metric export configuration can be in as it is created, deployed, and disabled.
	Status pulumi.StringPtrInput
	// The specific AWS region that the metrics will be exported to.
	TargetRegion pulumi.StringPtrInput
	// Elaborates on the metric export status and hints at how to fix issues that may have occurred during asynchronous operations.
	UserMessage pulumi.StringPtrInput
}

func (MetricExportCloudwatchConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricExportCloudwatchConfigState)(nil)).Elem()
}

type metricExportCloudwatchConfigArgs struct {
	// Cluster ID.
	ClusterId string `pulumi:"clusterId"`
	// The customized AWS CloudWatch log group name.
	LogGroupName *string `pulumi:"logGroupName"`
	// The IAM role used to upload metric segments to the target AWS account.
	RoleArn string `pulumi:"roleArn"`
	// The specific AWS region that the metrics will be exported to.
	TargetRegion *string `pulumi:"targetRegion"`
}

// The set of arguments for constructing a MetricExportCloudwatchConfig resource.
type MetricExportCloudwatchConfigArgs struct {
	// Cluster ID.
	ClusterId pulumi.StringInput
	// The customized AWS CloudWatch log group name.
	LogGroupName pulumi.StringPtrInput
	// The IAM role used to upload metric segments to the target AWS account.
	RoleArn pulumi.StringInput
	// The specific AWS region that the metrics will be exported to.
	TargetRegion pulumi.StringPtrInput
}

func (MetricExportCloudwatchConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricExportCloudwatchConfigArgs)(nil)).Elem()
}

type MetricExportCloudwatchConfigInput interface {
	pulumi.Input

	ToMetricExportCloudwatchConfigOutput() MetricExportCloudwatchConfigOutput
	ToMetricExportCloudwatchConfigOutputWithContext(ctx context.Context) MetricExportCloudwatchConfigOutput
}

func (*MetricExportCloudwatchConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricExportCloudwatchConfig)(nil)).Elem()
}

func (i *MetricExportCloudwatchConfig) ToMetricExportCloudwatchConfigOutput() MetricExportCloudwatchConfigOutput {
	return i.ToMetricExportCloudwatchConfigOutputWithContext(context.Background())
}

func (i *MetricExportCloudwatchConfig) ToMetricExportCloudwatchConfigOutputWithContext(ctx context.Context) MetricExportCloudwatchConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricExportCloudwatchConfigOutput)
}

// MetricExportCloudwatchConfigArrayInput is an input type that accepts MetricExportCloudwatchConfigArray and MetricExportCloudwatchConfigArrayOutput values.
// You can construct a concrete instance of `MetricExportCloudwatchConfigArrayInput` via:
//
//	MetricExportCloudwatchConfigArray{ MetricExportCloudwatchConfigArgs{...} }
type MetricExportCloudwatchConfigArrayInput interface {
	pulumi.Input

	ToMetricExportCloudwatchConfigArrayOutput() MetricExportCloudwatchConfigArrayOutput
	ToMetricExportCloudwatchConfigArrayOutputWithContext(context.Context) MetricExportCloudwatchConfigArrayOutput
}

type MetricExportCloudwatchConfigArray []MetricExportCloudwatchConfigInput

func (MetricExportCloudwatchConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricExportCloudwatchConfig)(nil)).Elem()
}

func (i MetricExportCloudwatchConfigArray) ToMetricExportCloudwatchConfigArrayOutput() MetricExportCloudwatchConfigArrayOutput {
	return i.ToMetricExportCloudwatchConfigArrayOutputWithContext(context.Background())
}

func (i MetricExportCloudwatchConfigArray) ToMetricExportCloudwatchConfigArrayOutputWithContext(ctx context.Context) MetricExportCloudwatchConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricExportCloudwatchConfigArrayOutput)
}

// MetricExportCloudwatchConfigMapInput is an input type that accepts MetricExportCloudwatchConfigMap and MetricExportCloudwatchConfigMapOutput values.
// You can construct a concrete instance of `MetricExportCloudwatchConfigMapInput` via:
//
//	MetricExportCloudwatchConfigMap{ "key": MetricExportCloudwatchConfigArgs{...} }
type MetricExportCloudwatchConfigMapInput interface {
	pulumi.Input

	ToMetricExportCloudwatchConfigMapOutput() MetricExportCloudwatchConfigMapOutput
	ToMetricExportCloudwatchConfigMapOutputWithContext(context.Context) MetricExportCloudwatchConfigMapOutput
}

type MetricExportCloudwatchConfigMap map[string]MetricExportCloudwatchConfigInput

func (MetricExportCloudwatchConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricExportCloudwatchConfig)(nil)).Elem()
}

func (i MetricExportCloudwatchConfigMap) ToMetricExportCloudwatchConfigMapOutput() MetricExportCloudwatchConfigMapOutput {
	return i.ToMetricExportCloudwatchConfigMapOutputWithContext(context.Background())
}

func (i MetricExportCloudwatchConfigMap) ToMetricExportCloudwatchConfigMapOutputWithContext(ctx context.Context) MetricExportCloudwatchConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricExportCloudwatchConfigMapOutput)
}

type MetricExportCloudwatchConfigOutput struct{ *pulumi.OutputState }

func (MetricExportCloudwatchConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricExportCloudwatchConfig)(nil)).Elem()
}

func (o MetricExportCloudwatchConfigOutput) ToMetricExportCloudwatchConfigOutput() MetricExportCloudwatchConfigOutput {
	return o
}

func (o MetricExportCloudwatchConfigOutput) ToMetricExportCloudwatchConfigOutputWithContext(ctx context.Context) MetricExportCloudwatchConfigOutput {
	return o
}

// Cluster ID.
func (o MetricExportCloudwatchConfigOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricExportCloudwatchConfig) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The customized AWS CloudWatch log group name.
func (o MetricExportCloudwatchConfigOutput) LogGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricExportCloudwatchConfig) pulumi.StringOutput { return v.LogGroupName }).(pulumi.StringOutput)
}

// The IAM role used to upload metric segments to the target AWS account.
func (o MetricExportCloudwatchConfigOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricExportCloudwatchConfig) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// Encodes the possible states that a metric export configuration can be in as it is created, deployed, and disabled.
func (o MetricExportCloudwatchConfigOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricExportCloudwatchConfig) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The specific AWS region that the metrics will be exported to.
func (o MetricExportCloudwatchConfigOutput) TargetRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricExportCloudwatchConfig) pulumi.StringOutput { return v.TargetRegion }).(pulumi.StringOutput)
}

// Elaborates on the metric export status and hints at how to fix issues that may have occurred during asynchronous operations.
func (o MetricExportCloudwatchConfigOutput) UserMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricExportCloudwatchConfig) pulumi.StringOutput { return v.UserMessage }).(pulumi.StringOutput)
}

type MetricExportCloudwatchConfigArrayOutput struct{ *pulumi.OutputState }

func (MetricExportCloudwatchConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricExportCloudwatchConfig)(nil)).Elem()
}

func (o MetricExportCloudwatchConfigArrayOutput) ToMetricExportCloudwatchConfigArrayOutput() MetricExportCloudwatchConfigArrayOutput {
	return o
}

func (o MetricExportCloudwatchConfigArrayOutput) ToMetricExportCloudwatchConfigArrayOutputWithContext(ctx context.Context) MetricExportCloudwatchConfigArrayOutput {
	return o
}

func (o MetricExportCloudwatchConfigArrayOutput) Index(i pulumi.IntInput) MetricExportCloudwatchConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetricExportCloudwatchConfig {
		return vs[0].([]*MetricExportCloudwatchConfig)[vs[1].(int)]
	}).(MetricExportCloudwatchConfigOutput)
}

type MetricExportCloudwatchConfigMapOutput struct{ *pulumi.OutputState }

func (MetricExportCloudwatchConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricExportCloudwatchConfig)(nil)).Elem()
}

func (o MetricExportCloudwatchConfigMapOutput) ToMetricExportCloudwatchConfigMapOutput() MetricExportCloudwatchConfigMapOutput {
	return o
}

func (o MetricExportCloudwatchConfigMapOutput) ToMetricExportCloudwatchConfigMapOutputWithContext(ctx context.Context) MetricExportCloudwatchConfigMapOutput {
	return o
}

func (o MetricExportCloudwatchConfigMapOutput) MapIndex(k pulumi.StringInput) MetricExportCloudwatchConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetricExportCloudwatchConfig {
		return vs[0].(map[string]*MetricExportCloudwatchConfig)[vs[1].(string)]
	}).(MetricExportCloudwatchConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetricExportCloudwatchConfigInput)(nil)).Elem(), &MetricExportCloudwatchConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricExportCloudwatchConfigArrayInput)(nil)).Elem(), MetricExportCloudwatchConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricExportCloudwatchConfigMapInput)(nil)).Elem(), MetricExportCloudwatchConfigMap{})
	pulumi.RegisterOutputType(MetricExportCloudwatchConfigOutput{})
	pulumi.RegisterOutputType(MetricExportCloudwatchConfigArrayOutput{})
	pulumi.RegisterOutputType(MetricExportCloudwatchConfigMapOutput{})
}
