// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cockroach

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-cockroach/sdk/go/cockroach/internal"
)

// A CockroachDB Cloud folder. Folders can contain clusters or other folders.  They can be used to group resources together for the purposes of access control, organization or fine grained invoicing.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-cockroach/sdk/go/cockroach"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			prodFolderId := cfg.Require("prodFolderId")
//			_, err := cockroach.LookupFolder(ctx, &cockroach.LookupFolderArgs{
//				Path: pulumi.StringRef("/prod/team1"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = cockroach.LookupFolder(ctx, &cockroach.LookupFolderArgs{
//				Id: pulumi.StringRef(prodFolderId),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupFolder(ctx *pulumi.Context, args *LookupFolderArgs, opts ...pulumi.InvokeOption) (*LookupFolderResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFolderResult
	err := ctx.Invoke("cockroach:index/getFolder:getFolder", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFolder.
type LookupFolderArgs struct {
	// The id the folder.
	Id *string `pulumi:"id"`
	// An absolute path to the folder. Trailing slashes are optional. (i.e. /folder1/folder2)
	Path *string `pulumi:"path"`
}

// A collection of values returned by getFolder.
type LookupFolderResult struct {
	// The id the folder.
	Id *string `pulumi:"id"`
	// Name of the folder.
	Name string `pulumi:"name"`
	// The ID of the folders's parent folder. 'root' is used for a folder at the root level.
	ParentId string `pulumi:"parentId"`
	// An absolute path to the folder. Trailing slashes are optional. (i.e. /folder1/folder2)
	Path *string `pulumi:"path"`
}

func LookupFolderOutput(ctx *pulumi.Context, args LookupFolderOutputArgs, opts ...pulumi.InvokeOption) LookupFolderResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupFolderResultOutput, error) {
			args := v.(LookupFolderArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupFolderResult
			secret, err := ctx.InvokePackageRaw("cockroach:index/getFolder:getFolder", args, &rv, "", opts...)
			if err != nil {
				return LookupFolderResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupFolderResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupFolderResultOutput), nil
			}
			return output, nil
		}).(LookupFolderResultOutput)
}

// A collection of arguments for invoking getFolder.
type LookupFolderOutputArgs struct {
	// The id the folder.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// An absolute path to the folder. Trailing slashes are optional. (i.e. /folder1/folder2)
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (LookupFolderOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFolderArgs)(nil)).Elem()
}

// A collection of values returned by getFolder.
type LookupFolderResultOutput struct{ *pulumi.OutputState }

func (LookupFolderResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFolderResult)(nil)).Elem()
}

func (o LookupFolderResultOutput) ToLookupFolderResultOutput() LookupFolderResultOutput {
	return o
}

func (o LookupFolderResultOutput) ToLookupFolderResultOutputWithContext(ctx context.Context) LookupFolderResultOutput {
	return o
}

// The id the folder.
func (o LookupFolderResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFolderResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the folder.
func (o LookupFolderResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFolderResult) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the folders's parent folder. 'root' is used for a folder at the root level.
func (o LookupFolderResultOutput) ParentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFolderResult) string { return v.ParentId }).(pulumi.StringOutput)
}

// An absolute path to the folder. Trailing slashes are optional. (i.e. /folder1/folder2)
func (o LookupFolderResultOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFolderResult) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFolderResultOutput{})
}
