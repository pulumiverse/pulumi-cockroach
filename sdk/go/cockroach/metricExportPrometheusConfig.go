// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cockroach

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-cockroach/sdk/go/cockroach/internal"
)

// Prometheus metric export configuration for a cluster. This is only available for dedicated clusters with AWS and GCP cloud providers.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-cockroach/sdk/go/cockroach"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			clusterId := cfg.Require("clusterId")
//			_, err := cockroach.NewMetricExportPrometheusConfig(ctx, "example", &cockroach.MetricExportPrometheusConfigArgs{
//				ClusterId: pulumi.String(clusterId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type MetricExportPrometheusConfig struct {
	pulumi.CustomResourceState

	// Cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The current state of the metric export configuration.  Possible values are: [`NOT_DEPLOYED` `DISABLING` `ENABLING` `ENABLED` `ERROR`]
	Status  pulumi.StringOutput    `pulumi:"status"`
	Targets pulumi.StringMapOutput `pulumi:"targets"`
}

// NewMetricExportPrometheusConfig registers a new resource with the given unique name, arguments, and options.
func NewMetricExportPrometheusConfig(ctx *pulumi.Context,
	name string, args *MetricExportPrometheusConfigArgs, opts ...pulumi.ResourceOption) (*MetricExportPrometheusConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetricExportPrometheusConfig
	err := ctx.RegisterResource("cockroach:index/metricExportPrometheusConfig:MetricExportPrometheusConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricExportPrometheusConfig gets an existing MetricExportPrometheusConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricExportPrometheusConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricExportPrometheusConfigState, opts ...pulumi.ResourceOption) (*MetricExportPrometheusConfig, error) {
	var resource MetricExportPrometheusConfig
	err := ctx.ReadResource("cockroach:index/metricExportPrometheusConfig:MetricExportPrometheusConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricExportPrometheusConfig resources.
type metricExportPrometheusConfigState struct {
	// Cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// The current state of the metric export configuration.  Possible values are: [`NOT_DEPLOYED` `DISABLING` `ENABLING` `ENABLED` `ERROR`]
	Status  *string           `pulumi:"status"`
	Targets map[string]string `pulumi:"targets"`
}

type MetricExportPrometheusConfigState struct {
	// Cluster ID.
	ClusterId pulumi.StringPtrInput
	// The current state of the metric export configuration.  Possible values are: [`NOT_DEPLOYED` `DISABLING` `ENABLING` `ENABLED` `ERROR`]
	Status  pulumi.StringPtrInput
	Targets pulumi.StringMapInput
}

func (MetricExportPrometheusConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricExportPrometheusConfigState)(nil)).Elem()
}

type metricExportPrometheusConfigArgs struct {
	// Cluster ID.
	ClusterId string `pulumi:"clusterId"`
}

// The set of arguments for constructing a MetricExportPrometheusConfig resource.
type MetricExportPrometheusConfigArgs struct {
	// Cluster ID.
	ClusterId pulumi.StringInput
}

func (MetricExportPrometheusConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricExportPrometheusConfigArgs)(nil)).Elem()
}

type MetricExportPrometheusConfigInput interface {
	pulumi.Input

	ToMetricExportPrometheusConfigOutput() MetricExportPrometheusConfigOutput
	ToMetricExportPrometheusConfigOutputWithContext(ctx context.Context) MetricExportPrometheusConfigOutput
}

func (*MetricExportPrometheusConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricExportPrometheusConfig)(nil)).Elem()
}

func (i *MetricExportPrometheusConfig) ToMetricExportPrometheusConfigOutput() MetricExportPrometheusConfigOutput {
	return i.ToMetricExportPrometheusConfigOutputWithContext(context.Background())
}

func (i *MetricExportPrometheusConfig) ToMetricExportPrometheusConfigOutputWithContext(ctx context.Context) MetricExportPrometheusConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricExportPrometheusConfigOutput)
}

// MetricExportPrometheusConfigArrayInput is an input type that accepts MetricExportPrometheusConfigArray and MetricExportPrometheusConfigArrayOutput values.
// You can construct a concrete instance of `MetricExportPrometheusConfigArrayInput` via:
//
//	MetricExportPrometheusConfigArray{ MetricExportPrometheusConfigArgs{...} }
type MetricExportPrometheusConfigArrayInput interface {
	pulumi.Input

	ToMetricExportPrometheusConfigArrayOutput() MetricExportPrometheusConfigArrayOutput
	ToMetricExportPrometheusConfigArrayOutputWithContext(context.Context) MetricExportPrometheusConfigArrayOutput
}

type MetricExportPrometheusConfigArray []MetricExportPrometheusConfigInput

func (MetricExportPrometheusConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricExportPrometheusConfig)(nil)).Elem()
}

func (i MetricExportPrometheusConfigArray) ToMetricExportPrometheusConfigArrayOutput() MetricExportPrometheusConfigArrayOutput {
	return i.ToMetricExportPrometheusConfigArrayOutputWithContext(context.Background())
}

func (i MetricExportPrometheusConfigArray) ToMetricExportPrometheusConfigArrayOutputWithContext(ctx context.Context) MetricExportPrometheusConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricExportPrometheusConfigArrayOutput)
}

// MetricExportPrometheusConfigMapInput is an input type that accepts MetricExportPrometheusConfigMap and MetricExportPrometheusConfigMapOutput values.
// You can construct a concrete instance of `MetricExportPrometheusConfigMapInput` via:
//
//	MetricExportPrometheusConfigMap{ "key": MetricExportPrometheusConfigArgs{...} }
type MetricExportPrometheusConfigMapInput interface {
	pulumi.Input

	ToMetricExportPrometheusConfigMapOutput() MetricExportPrometheusConfigMapOutput
	ToMetricExportPrometheusConfigMapOutputWithContext(context.Context) MetricExportPrometheusConfigMapOutput
}

type MetricExportPrometheusConfigMap map[string]MetricExportPrometheusConfigInput

func (MetricExportPrometheusConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricExportPrometheusConfig)(nil)).Elem()
}

func (i MetricExportPrometheusConfigMap) ToMetricExportPrometheusConfigMapOutput() MetricExportPrometheusConfigMapOutput {
	return i.ToMetricExportPrometheusConfigMapOutputWithContext(context.Background())
}

func (i MetricExportPrometheusConfigMap) ToMetricExportPrometheusConfigMapOutputWithContext(ctx context.Context) MetricExportPrometheusConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricExportPrometheusConfigMapOutput)
}

type MetricExportPrometheusConfigOutput struct{ *pulumi.OutputState }

func (MetricExportPrometheusConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricExportPrometheusConfig)(nil)).Elem()
}

func (o MetricExportPrometheusConfigOutput) ToMetricExportPrometheusConfigOutput() MetricExportPrometheusConfigOutput {
	return o
}

func (o MetricExportPrometheusConfigOutput) ToMetricExportPrometheusConfigOutputWithContext(ctx context.Context) MetricExportPrometheusConfigOutput {
	return o
}

// Cluster ID.
func (o MetricExportPrometheusConfigOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricExportPrometheusConfig) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The current state of the metric export configuration.  Possible values are: [`NOT_DEPLOYED` `DISABLING` `ENABLING` `ENABLED` `ERROR`]
func (o MetricExportPrometheusConfigOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricExportPrometheusConfig) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o MetricExportPrometheusConfigOutput) Targets() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MetricExportPrometheusConfig) pulumi.StringMapOutput { return v.Targets }).(pulumi.StringMapOutput)
}

type MetricExportPrometheusConfigArrayOutput struct{ *pulumi.OutputState }

func (MetricExportPrometheusConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricExportPrometheusConfig)(nil)).Elem()
}

func (o MetricExportPrometheusConfigArrayOutput) ToMetricExportPrometheusConfigArrayOutput() MetricExportPrometheusConfigArrayOutput {
	return o
}

func (o MetricExportPrometheusConfigArrayOutput) ToMetricExportPrometheusConfigArrayOutputWithContext(ctx context.Context) MetricExportPrometheusConfigArrayOutput {
	return o
}

func (o MetricExportPrometheusConfigArrayOutput) Index(i pulumi.IntInput) MetricExportPrometheusConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetricExportPrometheusConfig {
		return vs[0].([]*MetricExportPrometheusConfig)[vs[1].(int)]
	}).(MetricExportPrometheusConfigOutput)
}

type MetricExportPrometheusConfigMapOutput struct{ *pulumi.OutputState }

func (MetricExportPrometheusConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricExportPrometheusConfig)(nil)).Elem()
}

func (o MetricExportPrometheusConfigMapOutput) ToMetricExportPrometheusConfigMapOutput() MetricExportPrometheusConfigMapOutput {
	return o
}

func (o MetricExportPrometheusConfigMapOutput) ToMetricExportPrometheusConfigMapOutputWithContext(ctx context.Context) MetricExportPrometheusConfigMapOutput {
	return o
}

func (o MetricExportPrometheusConfigMapOutput) MapIndex(k pulumi.StringInput) MetricExportPrometheusConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetricExportPrometheusConfig {
		return vs[0].(map[string]*MetricExportPrometheusConfig)[vs[1].(string)]
	}).(MetricExportPrometheusConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetricExportPrometheusConfigInput)(nil)).Elem(), &MetricExportPrometheusConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricExportPrometheusConfigArrayInput)(nil)).Elem(), MetricExportPrometheusConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricExportPrometheusConfigMapInput)(nil)).Elem(), MetricExportPrometheusConfigMap{})
	pulumi.RegisterOutputType(MetricExportPrometheusConfigOutput{})
	pulumi.RegisterOutputType(MetricExportPrometheusConfigArrayOutput{})
	pulumi.RegisterOutputType(MetricExportPrometheusConfigMapOutput{})
}
