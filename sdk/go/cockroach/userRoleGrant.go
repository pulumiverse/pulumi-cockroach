// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cockroach

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-cockroach/sdk/go/cockroach/internal"
)

// ## Example Usage
//
// ## Import
//
// Cluster and folder level role grants can be imported using:
//
// <user_id>,<role_name>,<resource_type>,<resource_id>
//
// ```sh
// $ pulumi import cockroach:index/userRoleGrant:UserRoleGrant admin_grant 1f69fdd2-600a-4cfc-a9ba-16995df0d77d,CLUSTER_ADMIN,CLUSTER,9b9d23fe-3848-40b2-a3c5-d8ccb1c4f831
// ```
//
// Organization level grants can omit the resource_id
//
// ```sh
// $ pulumi import cockroach:index/userRoleGrant:UserRoleGrant org_level_grant 1f69fdd2-600a-4cfc-a9ba-16995df0d77d,ORG_ADMIN,ORGANIZATION
// ```
type UserRoleGrant struct {
	pulumi.CustomResourceState

	Role UserRoleGrantRoleOutput `pulumi:"role"`
	// ID of the user to grant these roles to.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewUserRoleGrant registers a new resource with the given unique name, arguments, and options.
func NewUserRoleGrant(ctx *pulumi.Context,
	name string, args *UserRoleGrantArgs, opts ...pulumi.ResourceOption) (*UserRoleGrant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserRoleGrant
	err := ctx.RegisterResource("cockroach:index/userRoleGrant:UserRoleGrant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserRoleGrant gets an existing UserRoleGrant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserRoleGrant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserRoleGrantState, opts ...pulumi.ResourceOption) (*UserRoleGrant, error) {
	var resource UserRoleGrant
	err := ctx.ReadResource("cockroach:index/userRoleGrant:UserRoleGrant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserRoleGrant resources.
type userRoleGrantState struct {
	Role *UserRoleGrantRole `pulumi:"role"`
	// ID of the user to grant these roles to.
	UserId *string `pulumi:"userId"`
}

type UserRoleGrantState struct {
	Role UserRoleGrantRolePtrInput
	// ID of the user to grant these roles to.
	UserId pulumi.StringPtrInput
}

func (UserRoleGrantState) ElementType() reflect.Type {
	return reflect.TypeOf((*userRoleGrantState)(nil)).Elem()
}

type userRoleGrantArgs struct {
	Role UserRoleGrantRole `pulumi:"role"`
	// ID of the user to grant these roles to.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a UserRoleGrant resource.
type UserRoleGrantArgs struct {
	Role UserRoleGrantRoleInput
	// ID of the user to grant these roles to.
	UserId pulumi.StringInput
}

func (UserRoleGrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userRoleGrantArgs)(nil)).Elem()
}

type UserRoleGrantInput interface {
	pulumi.Input

	ToUserRoleGrantOutput() UserRoleGrantOutput
	ToUserRoleGrantOutputWithContext(ctx context.Context) UserRoleGrantOutput
}

func (*UserRoleGrant) ElementType() reflect.Type {
	return reflect.TypeOf((**UserRoleGrant)(nil)).Elem()
}

func (i *UserRoleGrant) ToUserRoleGrantOutput() UserRoleGrantOutput {
	return i.ToUserRoleGrantOutputWithContext(context.Background())
}

func (i *UserRoleGrant) ToUserRoleGrantOutputWithContext(ctx context.Context) UserRoleGrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserRoleGrantOutput)
}

// UserRoleGrantArrayInput is an input type that accepts UserRoleGrantArray and UserRoleGrantArrayOutput values.
// You can construct a concrete instance of `UserRoleGrantArrayInput` via:
//
//	UserRoleGrantArray{ UserRoleGrantArgs{...} }
type UserRoleGrantArrayInput interface {
	pulumi.Input

	ToUserRoleGrantArrayOutput() UserRoleGrantArrayOutput
	ToUserRoleGrantArrayOutputWithContext(context.Context) UserRoleGrantArrayOutput
}

type UserRoleGrantArray []UserRoleGrantInput

func (UserRoleGrantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserRoleGrant)(nil)).Elem()
}

func (i UserRoleGrantArray) ToUserRoleGrantArrayOutput() UserRoleGrantArrayOutput {
	return i.ToUserRoleGrantArrayOutputWithContext(context.Background())
}

func (i UserRoleGrantArray) ToUserRoleGrantArrayOutputWithContext(ctx context.Context) UserRoleGrantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserRoleGrantArrayOutput)
}

// UserRoleGrantMapInput is an input type that accepts UserRoleGrantMap and UserRoleGrantMapOutput values.
// You can construct a concrete instance of `UserRoleGrantMapInput` via:
//
//	UserRoleGrantMap{ "key": UserRoleGrantArgs{...} }
type UserRoleGrantMapInput interface {
	pulumi.Input

	ToUserRoleGrantMapOutput() UserRoleGrantMapOutput
	ToUserRoleGrantMapOutputWithContext(context.Context) UserRoleGrantMapOutput
}

type UserRoleGrantMap map[string]UserRoleGrantInput

func (UserRoleGrantMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserRoleGrant)(nil)).Elem()
}

func (i UserRoleGrantMap) ToUserRoleGrantMapOutput() UserRoleGrantMapOutput {
	return i.ToUserRoleGrantMapOutputWithContext(context.Background())
}

func (i UserRoleGrantMap) ToUserRoleGrantMapOutputWithContext(ctx context.Context) UserRoleGrantMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserRoleGrantMapOutput)
}

type UserRoleGrantOutput struct{ *pulumi.OutputState }

func (UserRoleGrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserRoleGrant)(nil)).Elem()
}

func (o UserRoleGrantOutput) ToUserRoleGrantOutput() UserRoleGrantOutput {
	return o
}

func (o UserRoleGrantOutput) ToUserRoleGrantOutputWithContext(ctx context.Context) UserRoleGrantOutput {
	return o
}

func (o UserRoleGrantOutput) Role() UserRoleGrantRoleOutput {
	return o.ApplyT(func(v *UserRoleGrant) UserRoleGrantRoleOutput { return v.Role }).(UserRoleGrantRoleOutput)
}

// ID of the user to grant these roles to.
func (o UserRoleGrantOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserRoleGrant) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type UserRoleGrantArrayOutput struct{ *pulumi.OutputState }

func (UserRoleGrantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserRoleGrant)(nil)).Elem()
}

func (o UserRoleGrantArrayOutput) ToUserRoleGrantArrayOutput() UserRoleGrantArrayOutput {
	return o
}

func (o UserRoleGrantArrayOutput) ToUserRoleGrantArrayOutputWithContext(ctx context.Context) UserRoleGrantArrayOutput {
	return o
}

func (o UserRoleGrantArrayOutput) Index(i pulumi.IntInput) UserRoleGrantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserRoleGrant {
		return vs[0].([]*UserRoleGrant)[vs[1].(int)]
	}).(UserRoleGrantOutput)
}

type UserRoleGrantMapOutput struct{ *pulumi.OutputState }

func (UserRoleGrantMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserRoleGrant)(nil)).Elem()
}

func (o UserRoleGrantMapOutput) ToUserRoleGrantMapOutput() UserRoleGrantMapOutput {
	return o
}

func (o UserRoleGrantMapOutput) ToUserRoleGrantMapOutputWithContext(ctx context.Context) UserRoleGrantMapOutput {
	return o
}

func (o UserRoleGrantMapOutput) MapIndex(k pulumi.StringInput) UserRoleGrantOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserRoleGrant {
		return vs[0].(map[string]*UserRoleGrant)[vs[1].(string)]
	}).(UserRoleGrantOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserRoleGrantInput)(nil)).Elem(), &UserRoleGrant{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserRoleGrantArrayInput)(nil)).Elem(), UserRoleGrantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserRoleGrantMapInput)(nil)).Elem(), UserRoleGrantMap{})
	pulumi.RegisterOutputType(UserRoleGrantOutput{})
	pulumi.RegisterOutputType(UserRoleGrantArrayOutput{})
	pulumi.RegisterOutputType(UserRoleGrantMapOutput{})
}
