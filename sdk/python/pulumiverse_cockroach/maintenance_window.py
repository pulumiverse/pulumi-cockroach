# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['MaintenanceWindowArgs', 'MaintenanceWindow']

@pulumi.input_type
class MaintenanceWindowArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 offset_duration: pulumi.Input[int],
                 window_duration: pulumi.Input[int]):
        """
        The set of arguments for constructing a MaintenanceWindow resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[int] offset_duration: Duration in seconds from the beginning of each Monday (UTC) after which the maintenance window starts.
        :param pulumi.Input[int] window_duration: Duration in seconds that the maintenance window will remain active for after it starts.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "offset_duration", offset_duration)
        pulumi.set(__self__, "window_duration", window_duration)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="offsetDuration")
    def offset_duration(self) -> pulumi.Input[int]:
        """
        Duration in seconds from the beginning of each Monday (UTC) after which the maintenance window starts.
        """
        return pulumi.get(self, "offset_duration")

    @offset_duration.setter
    def offset_duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "offset_duration", value)

    @property
    @pulumi.getter(name="windowDuration")
    def window_duration(self) -> pulumi.Input[int]:
        """
        Duration in seconds that the maintenance window will remain active for after it starts.
        """
        return pulumi.get(self, "window_duration")

    @window_duration.setter
    def window_duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "window_duration", value)


@pulumi.input_type
class _MaintenanceWindowState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 offset_duration: Optional[pulumi.Input[int]] = None,
                 window_duration: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering MaintenanceWindow resources.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[int] offset_duration: Duration in seconds from the beginning of each Monday (UTC) after which the maintenance window starts.
        :param pulumi.Input[int] window_duration: Duration in seconds that the maintenance window will remain active for after it starts.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if offset_duration is not None:
            pulumi.set(__self__, "offset_duration", offset_duration)
        if window_duration is not None:
            pulumi.set(__self__, "window_duration", window_duration)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="offsetDuration")
    def offset_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Duration in seconds from the beginning of each Monday (UTC) after which the maintenance window starts.
        """
        return pulumi.get(self, "offset_duration")

    @offset_duration.setter
    def offset_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "offset_duration", value)

    @property
    @pulumi.getter(name="windowDuration")
    def window_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Duration in seconds that the maintenance window will remain active for after it starts.
        """
        return pulumi.get(self, "window_duration")

    @window_duration.setter
    def window_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "window_duration", value)


class MaintenanceWindow(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 offset_duration: Optional[pulumi.Input[int]] = None,
                 window_duration: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Maintenance window configuration for a cluster.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[int] offset_duration: Duration in seconds from the beginning of each Monday (UTC) after which the maintenance window starts.
        :param pulumi.Input[int] window_duration: Duration in seconds that the maintenance window will remain active for after it starts.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MaintenanceWindowArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Maintenance window configuration for a cluster.

        :param str resource_name: The name of the resource.
        :param MaintenanceWindowArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MaintenanceWindowArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 offset_duration: Optional[pulumi.Input[int]] = None,
                 window_duration: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MaintenanceWindowArgs.__new__(MaintenanceWindowArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if offset_duration is None and not opts.urn:
                raise TypeError("Missing required property 'offset_duration'")
            __props__.__dict__["offset_duration"] = offset_duration
            if window_duration is None and not opts.urn:
                raise TypeError("Missing required property 'window_duration'")
            __props__.__dict__["window_duration"] = window_duration
        super(MaintenanceWindow, __self__).__init__(
            'cockroach:index/maintenanceWindow:MaintenanceWindow',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            offset_duration: Optional[pulumi.Input[int]] = None,
            window_duration: Optional[pulumi.Input[int]] = None) -> 'MaintenanceWindow':
        """
        Get an existing MaintenanceWindow resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[int] offset_duration: Duration in seconds from the beginning of each Monday (UTC) after which the maintenance window starts.
        :param pulumi.Input[int] window_duration: Duration in seconds that the maintenance window will remain active for after it starts.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MaintenanceWindowState.__new__(_MaintenanceWindowState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["offset_duration"] = offset_duration
        __props__.__dict__["window_duration"] = window_duration
        return MaintenanceWindow(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="offsetDuration")
    def offset_duration(self) -> pulumi.Output[int]:
        """
        Duration in seconds from the beginning of each Monday (UTC) after which the maintenance window starts.
        """
        return pulumi.get(self, "offset_duration")

    @property
    @pulumi.getter(name="windowDuration")
    def window_duration(self) -> pulumi.Output[int]:
        """
        Duration in seconds that the maintenance window will remain active for after it starts.
        """
        return pulumi.get(self, "window_duration")

